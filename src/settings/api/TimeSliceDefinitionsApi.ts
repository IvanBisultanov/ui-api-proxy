/**
 * Settings
 * Set up and change global account and property settings.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { ApaleoRequestOptions, ResponseModel }                     from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';



export namespace settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGet {
    export interface Params {
        /**
        * The id of the property.
        */
        propertyId: string;
        /**
        * The id of the time slice definition.
        */
        id: string;
    }
    
}
export namespace settingsPropertiesByPropertyIdTimeSliceDefinitionsGet {
    export interface Params {
        /**
        * The id of the property.
        */
        propertyId: string;
    }
    
}
export namespace settingsPropertiesByPropertyIdTimeSliceDefinitionsPatch {
    export interface Params {
        /**
        * The id of the property.
        */
        propertyId: string;
        /**
        * The operations to apply to the time slice definitions.
        */
        requestBody: models.JsonPatchDocumentModifyTimeSliceDefinitionListModel;
    }
    
}

@Injectable()
export class TimeSliceDefinitionsApi {
    public readonly defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Get a specific time slice definition
     * Get a specific time slice definition for a property. A time slice definition specifies  the pattern for recurring time slots. The time slots define when reservations  in the property can start or end.  It is used in the rate plans when managing prices for renting out the units.
     * @param propertyId The id of the property.
     * @param id The id of the time slice definition.
     */
    public settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGet(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGet.Params, $options?: ApaleoRequestOptions)
        : Observable<models.TimeSliceDefinitionModel | undefined> {
        return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Get time slice definitions
     * Get all time slice definitions for a property. A time slice definition specifies  the pattern for recurring time slots. The time slots define when reservations  in the property can start or end.  They are used in the rate plans when managing prices for renting out the units.
     * @param propertyId The id of the property.
     */
    public settingsPropertiesByPropertyIdTimeSliceDefinitionsGet(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsGet.Params, $options?: ApaleoRequestOptions)
        : Observable<models.TimeSliceDefinitionListModel | undefined> {
        return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Modifies time slice definitions for the property
     * Use this call to modify the time slice definitions of the property.
     * @param propertyId The id of the property.
     * @param requestBody The operations to apply to the time slice definitions.
     */
    public settingsPropertiesByPropertyIdTimeSliceDefinitionsPatch(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsPatch.Params, $options?: ApaleoRequestOptions)
        : Observable<void> {
        return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsPatchWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Get a specific time slice definition
     * Get a specific time slice definition for a property. A time slice definition specifies  the pattern for recurring time slots. The time slots define when reservations  in the property can start or end.  It is used in the rate plans when managing prices for renting out the units.
     * @param propertyId The id of the property.
     * @param id The id of the time slice definition.
     */
    public settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGetWithRawHttp(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGet.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<models.TimeSliceDefinitionModel>> {
        return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Get time slice definitions
     * Get all time slice definitions for a property. A time slice definition specifies  the pattern for recurring time slots. The time slots define when reservations  in the property can start or end.  They are used in the rate plans when managing prices for renting out the units.
     * @param propertyId The id of the property.
     */
    public settingsPropertiesByPropertyIdTimeSliceDefinitionsGetWithRawHttp(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsGet.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<models.TimeSliceDefinitionListModel>> {
        return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Modifies time slice definitions for the property
     * Use this call to modify the time slice definitions of the property.
     * @param propertyId The id of the property.
     * @param requestBody The operations to apply to the time slice definitions.
     */
    public settingsPropertiesByPropertyIdTimeSliceDefinitionsPatchWithRawHttp(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsPatch.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsPatchWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Get a specific time slice definition
     * Get a specific time slice definition for a property. A time slice definition specifies  the pattern for recurring time slots. The time slots define when reservations  in the property can start or end.  It is used in the rate plans when managing prices for renting out the units.
     * @param propertyId The id of the property.
     * @param id The id of the time slice definition.
     */
    private settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGetWithHttpInfo(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGet.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/settings/properties/${propertyId}/time-slice-definitions/${id}'
                    .replace('${' + 'propertyId' + '}', String(params.propertyId))
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'propertyId' is not null or undefined
        if (params.propertyId === null || params.propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGet.');
        }
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsByIdGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Get time slice definitions
     * Get all time slice definitions for a property. A time slice definition specifies  the pattern for recurring time slots. The time slots define when reservations  in the property can start or end.  They are used in the rate plans when managing prices for renting out the units.
     * @param propertyId The id of the property.
     */
    private settingsPropertiesByPropertyIdTimeSliceDefinitionsGetWithHttpInfo(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsGet.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/settings/properties/${propertyId}/time-slice-definitions'
                    .replace('${' + 'propertyId' + '}', String(params.propertyId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'propertyId' is not null or undefined
        if (params.propertyId === null || params.propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling settingsPropertiesByPropertyIdTimeSliceDefinitionsGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Modifies time slice definitions for the property
     * Use this call to modify the time slice definitions of the property.
     * @param propertyId The id of the property.
     * @param requestBody The operations to apply to the time slice definitions.
     */
    private settingsPropertiesByPropertyIdTimeSliceDefinitionsPatchWithHttpInfo(params: settingsPropertiesByPropertyIdTimeSliceDefinitionsPatch.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/settings/properties/${propertyId}/time-slice-definitions'
                    .replace('${' + 'propertyId' + '}', String(params.propertyId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'propertyId' is not null or undefined
        if (params.propertyId === null || params.propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling settingsPropertiesByPropertyIdTimeSliceDefinitionsPatch.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling settingsPropertiesByPropertyIdTimeSliceDefinitionsPatch.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Patch,
                headers: headers,
                body: params.requestBody == null ? '' : params.requestBody, // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.settingsPropertiesByPropertyIdTimeSliceDefinitionsPatchWithHttpInfo(params, $options);
            }
        )
    }

}
