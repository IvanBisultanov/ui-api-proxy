/**
 * Settings
 * Set up and change global account and property settings.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface OperationReplaceTimeSliceDefinitionListModel {
    value?: any;

    path?: string;

    op?: string;

    from?: string;

}

export type OperationReplaceTimeSliceDefinitionListModelWithRawHttp = OperationReplaceTimeSliceDefinitionListModel & ResponseModel<OperationReplaceTimeSliceDefinitionListModel>;

export namespace OperationReplaceTimeSliceDefinitionListModel {
    export const $metaData = { 
        value: Object.freeze({ 
            type: 'any',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        path: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        op: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        from: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<OperationReplaceTimeSliceDefinitionListModel>): FormGroup {
        const defaultControls = { 
            value: getControl($metaData.value, options, 'value'),
            path: getControl($metaData.path, options, 'path'),
            op: getControl($metaData.op, options, 'op'),
            from: getControl($metaData.from, options, 'from'),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

