/**
 * Apaleo Bookings API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                              from '@angular/forms';
import { IBuildFormOptions, IApaleoPropertyMetaData }          from '../../types';
import { ResponseModel }                                       from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup } from '../../functions.model';

export interface ReservationModel {
    /**
     * Reservation id
     */
    id?: string;

    /**
     * Confirmation code of the reservation
     */
    code?: string;

    /**
     * Status of the reservation
     */
    status?: ReservationModel.StatusEnum;

    /**
     * Time of check-in
     */
    checkInTimeUtc?: Date;

    /**
     * Time of check-out
     */
    checkOutTimeUtc?: Date;

    /**
     * Assigned unit
     */
    unit?: models.EmbeddedUnitModel;

    /**
     * Property
     */
    property?: models.EmbeddedPropertyModel;

    /**
     * RatePlan
     */
    ratePlan?: models.EmbeddedRatePlanModel;

    /**
     * Unit type
     */
    unitType?: models.EmbeddedUnitTypeModel;

    /**
     * Total amount
     */
    totalAmount?: number;

    /**
     * Date of arrival
     */
    arrival?: Date;

    /**
     * Date of departure
     */
    departure?: Date;

    /**
     * Number of adults
     */
    adults?: number;

    /**
     * Number of children
     */
    children?: number;

    /**
     * Code of the guest title
     */
    guestTitle?: string;

    /**
     * First name of the guest
     */
    firstName?: string;

    /**
     * Middle initial of the guest
     */
    middleInitial?: string;

    /**
     * Last name of the guest
     */
    lastName?: string;

    /**
     * Email address  of the guest
     */
    email?: string;

    /**
     * Phone number of the guest
     */
    phone?: string;

    /**
     * Street of the guest
     */
    street?: string;

    /**
     * Street number of the guest
     */
    number?: string;

    /**
     * City of the guest
     */
    city?: string;

    /**
     * Postal code of the guest
     */
    postalCode?: string;

    /**
     * Country code of the guest
     */
    countryCode?: string;

}
export namespace ReservationModel {
    export enum StatusEnum {
        Confirmed = <any> 'confirmed',
        InHouse = <any> 'inHouse',
        CheckedOut = <any> 'checkedOut'
    }
}

export type ReservationModelWithRawHttp = ReservationModel & ResponseModel<ReservationModel>;

export namespace ReservationModel {
    export const $metaData = { 
        id: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        code: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        status: Object.freeze({ 
            type: 'string',
            isEnum: true,
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        checkInTimeUtc: Object.freeze({ 
            type: 'Date',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        checkOutTimeUtc: Object.freeze({ 
            type: 'Date',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        unit: Object.freeze({ 
            type: 'models.EmbeddedUnitModel',
        } as IApaleoPropertyMetaData),
        property: Object.freeze({ 
            type: 'models.EmbeddedPropertyModel',
        } as IApaleoPropertyMetaData),
        ratePlan: Object.freeze({ 
            type: 'models.EmbeddedRatePlanModel',
        } as IApaleoPropertyMetaData),
        unitType: Object.freeze({ 
            type: 'models.EmbeddedUnitTypeModel',
        } as IApaleoPropertyMetaData),
        totalAmount: Object.freeze({ 
            type: 'number',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        arrival: Object.freeze({ 
            type: 'Date',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        departure: Object.freeze({ 
            type: 'Date',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        adults: Object.freeze({ 
            type: 'number',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        children: Object.freeze({ 
            type: 'number',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        guestTitle: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        firstName: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        middleInitial: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        lastName: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        email: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        phone: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        street: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        number: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        city: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        postalCode: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        countryCode: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: IBuildFormOptions<ReservationModel>): FormGroup {
        const defaultControls = { 
            id: getControl($metaData.id, options, 'id'),
            code: getControl($metaData.code, options, 'code'),
            status: getControl($metaData.status, options, 'status'),
            checkInTimeUtc: getControl($metaData.checkInTimeUtc, options, 'checkInTimeUtc'),
            checkOutTimeUtc: getControl($metaData.checkOutTimeUtc, options, 'checkOutTimeUtc'),
            unit: models.EmbeddedUnitModel.$buildForm(fb),
            property: models.EmbeddedPropertyModel.$buildForm(fb),
            ratePlan: models.EmbeddedRatePlanModel.$buildForm(fb),
            unitType: models.EmbeddedUnitTypeModel.$buildForm(fb),
            totalAmount: getControl($metaData.totalAmount, options, 'totalAmount'),
            arrival: getControl($metaData.arrival, options, 'arrival'),
            departure: getControl($metaData.departure, options, 'departure'),
            adults: getControl($metaData.adults, options, 'adults'),
            children: getControl($metaData.children, options, 'children'),
            guestTitle: getControl($metaData.guestTitle, options, 'guestTitle'),
            firstName: getControl($metaData.firstName, options, 'firstName'),
            middleInitial: getControl($metaData.middleInitial, options, 'middleInitial'),
            lastName: getControl($metaData.lastName, options, 'lastName'),
            email: getControl($metaData.email, options, 'email'),
            phone: getControl($metaData.phone, options, 'phone'),
            street: getControl($metaData.street, options, 'street'),
            number: getControl($metaData.number, options, 'number'),
            city: getControl($metaData.city, options, 'city'),
            postalCode: getControl($metaData.postalCode, options, 'postalCode'),
            countryCode: getControl($metaData.countryCode, options, 'countryCode'),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

