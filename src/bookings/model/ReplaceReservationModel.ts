/**
 * Apaleo Bookings API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

/**
 * With this request you can modify a reservation
 */
import { Validators, FormBuilder, ValidatorFn, FormGroup, AbstractControl }  from '@angular/forms';
import { IBuildFormOptions, IControlFactoryOptions, Control }                from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData }                    from '../../types';
import { ResponseModel }                                                     from '../../models';
import { getControl, getControlOptions, adjustDefaultControls, setMetaData } from '../../functions';

export interface ReplaceReservationModel {
    /**
     * ID of the property
     */
    propertyId: string;

    /**
     * ID of the rateplan
     */
    rateplanId: string;

    /**
     * ID of the unit type
     */
    unitTypeId: string;

    /**
     * Date of arrival
     */
    arrival: Date;

    /**
     * Date of departure
     */
    departure: Date;

    /**
     * Number of adults
     */
    adults: number;

    /**
     * Number of children
     */
    children: number;

    /**
     * Code of the guest title
     */
    guestTitle: string;

    /**
     * First name of the guest
     */
    firstName: string;

    /**
     * Middle initial of the guest
     */
    middleInitial?: string;

    /**
     * Last name of the guest
     */
    lastName: string;

    /**
     * Email address  of the guest
     */
    email?: string;

    /**
     * Phone number of the guest
     */
    phone?: string;

    /**
     * Street of the guest
     */
    street?: string;

    /**
     * Street number of the guest
     */
    number?: string;

    /**
     * City of the guest
     */
    city: string;

    /**
     * Postal code of the guest
     */
    postalCode: string;

    /**
     * Country code of the guest
     */
    countryCode: string;

}

export type ReplaceReservationModelWithRawHttp = ReplaceReservationModel & ResponseModel<ReplaceReservationModel>;

export namespace ReplaceReservationModel {
    export const $validators = {
        propertyId: (() => [
            Validators.required,
        ]),
        rateplanId: (() => [
            Validators.required,
        ]),
        unitTypeId: (() => [
            Validators.required,
        ]),
        arrival: (() => [
            Validators.required,
        ]),
        departure: (() => [
            Validators.required,
        ]),
        adults: (() => [
            Validators.required,
        ]),
        children: (() => [
            Validators.required,
        ]),
        guestTitle: (() => [
            Validators.required,
        ]),
        firstName: (() => [
            Validators.required,
            Validators.maxLength(25),
        ]),
        middleInitial: (() => [
            Validators.maxLength(5),
        ]),
        lastName: (() => [
            Validators.required,
            Validators.maxLength(40),
        ]),
        email: (() => [
        ]),
        phone: (() => [
        ]),
        street: (() => [
            Validators.maxLength(40),
        ]),
        number: (() => [
        ]),
        city: (() => [
            Validators.required,
            Validators.maxLength(25),
        ]),
        postalCode: (() => [
            Validators.required,
            Validators.maxLength(10),
        ]),
        countryCode: (() => [
            Validators.required,
            Validators.maxLength(2),
        ]),
    };

    export const $controls = { 
        propertyId: ((options?: IControlFactoryOptions<string>) => getControl($validators.propertyId(), options)),
        rateplanId: ((options?: IControlFactoryOptions<string>) => getControl($validators.rateplanId(), options)),
        unitTypeId: ((options?: IControlFactoryOptions<string>) => getControl($validators.unitTypeId(), options)),
        arrival: ((options?: IControlFactoryOptions<Date>) => getControl($validators.arrival(), options)),
        departure: ((options?: IControlFactoryOptions<Date>) => getControl($validators.departure(), options)),
        adults: ((options?: IControlFactoryOptions<number>) => getControl($validators.adults(), options)),
        children: ((options?: IControlFactoryOptions<number>) => getControl($validators.children(), options)),
        guestTitle: ((options?: IControlFactoryOptions<string>) => getControl($validators.guestTitle(), options)),
        firstName: ((options?: IControlFactoryOptions<string>) => getControl($validators.firstName(), options)),
        middleInitial: ((options?: IControlFactoryOptions<string>) => getControl($validators.middleInitial(), options)),
        lastName: ((options?: IControlFactoryOptions<string>) => getControl($validators.lastName(), options)),
        email: ((options?: IControlFactoryOptions<string>) => getControl($validators.email(), options)),
        phone: ((options?: IControlFactoryOptions<string>) => getControl($validators.phone(), options)),
        street: ((options?: IControlFactoryOptions<string>) => getControl($validators.street(), options)),
        number: ((options?: IControlFactoryOptions<string>) => getControl($validators.number(), options)),
        city: ((options?: IControlFactoryOptions<string>) => getControl($validators.city(), options)),
        postalCode: ((options?: IControlFactoryOptions<string>) => getControl($validators.postalCode(), options)),
        countryCode: ((options?: IControlFactoryOptions<string>) => getControl($validators.countryCode(), options)),
    };

    export const $metaData = { 
        propertyId: { 
            type: 'string',
        } as IApaleoControlMetaData,
        rateplanId: { 
            type: 'string',
        } as IApaleoControlMetaData,
        unitTypeId: { 
            type: 'string',
        } as IApaleoControlMetaData,
        arrival: { 
            type: 'Date',
        } as IApaleoControlMetaData,
        departure: { 
            type: 'Date',
        } as IApaleoControlMetaData,
        adults: { 
            type: 'number',
        } as IApaleoControlMetaData,
        children: { 
            type: 'number',
        } as IApaleoControlMetaData,
        guestTitle: { 
            type: 'string',
        } as IApaleoControlMetaData,
        firstName: { 
            maxLength: 25,
            type: 'string',
        } as IApaleoControlMetaData,
        middleInitial: { 
            maxLength: 5,
            type: 'string',
        } as IApaleoControlMetaData,
        lastName: { 
            maxLength: 40,
            type: 'string',
        } as IApaleoControlMetaData,
        email: { 
            type: 'string',
        } as IApaleoControlMetaData,
        phone: { 
            type: 'string',
        } as IApaleoControlMetaData,
        street: { 
            maxLength: 40,
            type: 'string',
        } as IApaleoControlMetaData,
        number: { 
            type: 'string',
        } as IApaleoControlMetaData,
        city: { 
            maxLength: 25,
            type: 'string',
        } as IApaleoControlMetaData,
        postalCode: { 
            maxLength: 10,
            type: 'string',
        } as IApaleoControlMetaData,
        countryCode: { 
            maxLength: 2,
            type: 'string',
        } as IApaleoControlMetaData,
    };

    export function $buildForm(fb: FormBuilder, options?: IBuildFormOptions<ReplaceReservationModel>) {
        const defaultControls = { 
            propertyId: $controls.propertyId(getControlOptions(options, 'propertyId')),
            rateplanId: $controls.rateplanId(getControlOptions(options, 'rateplanId')),
            unitTypeId: $controls.unitTypeId(getControlOptions(options, 'unitTypeId')),
            arrival: $controls.arrival(getControlOptions(options, 'arrival')),
            departure: $controls.departure(getControlOptions(options, 'departure')),
            adults: $controls.adults(getControlOptions(options, 'adults')),
            children: $controls.children(getControlOptions(options, 'children')),
            guestTitle: $controls.guestTitle(getControlOptions(options, 'guestTitle')),
            firstName: $controls.firstName(getControlOptions(options, 'firstName')),
            middleInitial: $controls.middleInitial(getControlOptions(options, 'middleInitial')),
            lastName: $controls.lastName(getControlOptions(options, 'lastName')),
            email: $controls.email(getControlOptions(options, 'email')),
            phone: $controls.phone(getControlOptions(options, 'phone')),
            street: $controls.street(getControlOptions(options, 'street')),
            number: $controls.number(getControlOptions(options, 'number')),
            city: $controls.city(getControlOptions(options, 'city')),
            postalCode: $controls.postalCode(getControlOptions(options, 'postalCode')),
            countryCode: $controls.countryCode(getControlOptions(options, 'countryCode')),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options)!);

        setMetaData(<any>group.controls.propertyId, $metaData.propertyId);
        setMetaData(<any>group.controls.rateplanId, $metaData.rateplanId);
        setMetaData(<any>group.controls.unitTypeId, $metaData.unitTypeId);
        setMetaData(<any>group.controls.arrival, $metaData.arrival);
        setMetaData(<any>group.controls.departure, $metaData.departure);
        setMetaData(<any>group.controls.adults, $metaData.adults);
        setMetaData(<any>group.controls.children, $metaData.children);
        setMetaData(<any>group.controls.guestTitle, $metaData.guestTitle);
        setMetaData(<any>group.controls.firstName, $metaData.firstName);
        setMetaData(<any>group.controls.middleInitial, $metaData.middleInitial);
        setMetaData(<any>group.controls.lastName, $metaData.lastName);
        setMetaData(<any>group.controls.email, $metaData.email);
        setMetaData(<any>group.controls.phone, $metaData.phone);
        setMetaData(<any>group.controls.street, $metaData.street);
        setMetaData(<any>group.controls.number, $metaData.number);
        setMetaData(<any>group.controls.city, $metaData.city);
        setMetaData(<any>group.controls.postalCode, $metaData.postalCode);
        setMetaData(<any>group.controls.countryCode, $metaData.countryCode);

        return group;
    }
}

