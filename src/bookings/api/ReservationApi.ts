/**
 * Apaleo Bookings API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import { Observable }                                              from 'rxjs/Rx';
import 'rxjs/add/operator/map';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { IRequestOptions, ResponseModel }                          from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';

/* tslint:disable:no-unused-variable member-ordering */


export interface bookingsV1ReservationsByIdAssignUnitPostParams {
    /**
     * The id of the reservation.
     */
    id: string;
    /**
     * The definition of a unit to be assigned.
     */
    requestBody?: models.ReservationAssignUnitModel;
}
export interface bookingsV1ReservationsByIdCheckinPostParams {
    /**
     * The id of the reservation.
     */
    id: string;
}
export interface bookingsV1ReservationsByIdCheckoutPostParams {
    /**
     * The id of the reservation.
     */
    id: string;
}
export interface bookingsV1ReservationsByIdGetParams {
    /**
     * The id of the reservation.
     */
    id: string;
}
export interface bookingsV1ReservationsByIdPutParams {
    /**
     * The id of the reservation.
     */
    id: string;
    /**
     * The definition of the reservation.
     */
    requestBody: models.ReplaceReservationModel;
}
export interface bookingsV1ReservationsGetParams {
    /**
     * Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     */
    pageNumber: number;
    /**
     * Page size
     */
    pageSize: number;
    /**
     * Return reservations for specific properties
     */
    propertyIds?: Array<string>;
    /**
     * Return reservations with specific rate plans
     */
    ratePlanIds?: Array<string>;
    /**
     * Return reservations with specific units assigned
     */
    unitIds?: Array<string>;
    /**
     * Return reservations with specific unit types
     */
    unitTypeIds?: Array<string>;
    /**
     * Return reservations where the status is one of the specified values
     */
    statuses?: Array<string>;
    /**
     * Start date and time for the selected date filter
     */
    from?: Date;
    /**
     * End date and time for the selected date filter
     */
    to?: Date;
    /**
     * Filter by date and time attributes of reservation. The 'to' and 'from' dates will then define the date and time range.
     */
    dateFilter?: string;
}
export interface bookingsV1ReservationsPostParams {
    /**
     * The definition of the reservation.
     */
    requestBody: models.CreateReservationModel;
}
export interface bookingsV1ReservationscountGetParams {
    /**
     * Return reservations for specific properties
     */
    propertyIds?: Array<string>;
    /**
     * Return reservations with specific rate plans
     */
    ratePlanIds?: Array<string>;
    /**
     * Return reservations with specific units assigned
     */
    unitIds?: Array<string>;
    /**
     * Return reservations with specific unit types
     */
    unitTypeIds?: Array<string>;
    /**
     * Return reservations where the status is one of the specified values
     */
    statuses?: Array<string>;
    /**
     * Start date and time for the selected date filter
     */
    from?: Date;
    /**
     * End date and time for the selected date filter
     */
    to?: Date;
    /**
     * Filter by date and time attributes of reservation. The 'to' and 'from' dates will then define the date and time range.
     */
    dateFilter?: string;
}

@Injectable()
export class ReservationApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Assign a unit to a reservation
     * Use this call to assign a unit to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.
     * @param id The id of the reservation.
     * @param requestBody The definition of a unit to be assigned.
     */
    public bookingsV1ReservationsByIdAssignUnitPost(params: bookingsV1ReservationsByIdAssignUnitPostParams, $options?: IRequestOptions)
        : Observable<models.ReservationAssignedUnitModel | undefined> {
        return this.bookingsV1ReservationsByIdAssignUnitPostWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Check-in of a reservation
     * Use this call to check-in an existing reservation which is in status &#39;Confirmed&#39;.
     * @param id The id of the reservation.
     */
    public bookingsV1ReservationsByIdCheckinPost(params: bookingsV1ReservationsByIdCheckinPostParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.bookingsV1ReservationsByIdCheckinPostWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Check-out of a reservation
     * Use this call to check-out an existing reservation which is in status &#39;InHouse&#39;.
     * @param id The id of the reservation.
     */
    public bookingsV1ReservationsByIdCheckoutPost(params: bookingsV1ReservationsByIdCheckoutPostParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.bookingsV1ReservationsByIdCheckoutPostWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Get a reservation
     * Get a reservation by id.
     * @param id The id of the reservation.
     */
    public bookingsV1ReservationsByIdGet(params: bookingsV1ReservationsByIdGetParams, $options?: IRequestOptions)
        : Observable<models.ReservationModel | undefined> {
        return this.bookingsV1ReservationsByIdGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Replace a reservation
     * Use this call to modify a reservation.
     * @param id The id of the reservation.
     * @param requestBody The definition of the reservation.
     */
    public bookingsV1ReservationsByIdPut(params: bookingsV1ReservationsByIdPutParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.bookingsV1ReservationsByIdPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Get reservations with filters
     * Use this to get reservations matching the given filter criteria.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param propertyIds Return reservations for specific properties
     * @param ratePlanIds Return reservations with specific rate plans
     * @param unitIds Return reservations with specific units assigned
     * @param unitTypeIds Return reservations with specific unit types
     * @param statuses Return reservations where the status is one of the specified values
     * @param from Start date and time for the selected date filter
     * @param to End date and time for the selected date filter
     * @param dateFilter Filter by date and time attributes of reservation. The &#39;to&#39; and &#39;from&#39; dates will then define the date and time range.
     */
    public bookingsV1ReservationsGet(params: bookingsV1ReservationsGetParams, $options?: IRequestOptions)
        : Observable<models.ReservationListModel | undefined> {
        return this.bookingsV1ReservationsGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Creates a reservation
     * Use this call to create a new reservation.
     * @param requestBody The definition of the reservation.
     */
    public bookingsV1ReservationsPost(params: bookingsV1ReservationsPostParams, $options?: IRequestOptions)
        : Observable<models.ReservationCreatedModel | undefined> {
        return this.bookingsV1ReservationsPostWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Return total count of reservations
     * Return total count of reservations, filtered by the parameters
     * @param propertyIds Return reservations for specific properties
     * @param ratePlanIds Return reservations with specific rate plans
     * @param unitIds Return reservations with specific units assigned
     * @param unitTypeIds Return reservations with specific unit types
     * @param statuses Return reservations where the status is one of the specified values
     * @param from Start date and time for the selected date filter
     * @param to End date and time for the selected date filter
     * @param dateFilter Filter by date and time attributes of reservation. The &#39;to&#39; and &#39;from&#39; dates will then define the date and time range.
     */
    public bookingsV1ReservationscountGet(params: bookingsV1ReservationscountGetParams, $options?: IRequestOptions)
        : Observable<number | undefined> {
        return this.bookingsV1ReservationscountGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Assign a unit to a reservation
     * Use this call to assign a unit to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.
     * @param id The id of the reservation.
     * @param requestBody The definition of a unit to be assigned.
     */
    public bookingsV1ReservationsByIdAssignUnitPostWithRawHttp(params: bookingsV1ReservationsByIdAssignUnitPostParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.ReservationAssignedUnitModel>> {
        return this.bookingsV1ReservationsByIdAssignUnitPostWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Check-in of a reservation
     * Use this call to check-in an existing reservation which is in status &#39;Confirmed&#39;.
     * @param id The id of the reservation.
     */
    public bookingsV1ReservationsByIdCheckinPostWithRawHttp(params: bookingsV1ReservationsByIdCheckinPostParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.bookingsV1ReservationsByIdCheckinPostWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Check-out of a reservation
     * Use this call to check-out an existing reservation which is in status &#39;InHouse&#39;.
     * @param id The id of the reservation.
     */
    public bookingsV1ReservationsByIdCheckoutPostWithRawHttp(params: bookingsV1ReservationsByIdCheckoutPostParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.bookingsV1ReservationsByIdCheckoutPostWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Get a reservation
     * Get a reservation by id.
     * @param id The id of the reservation.
     */
    public bookingsV1ReservationsByIdGetWithRawHttp(params: bookingsV1ReservationsByIdGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.ReservationModel>> {
        return this.bookingsV1ReservationsByIdGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Replace a reservation
     * Use this call to modify a reservation.
     * @param id The id of the reservation.
     * @param requestBody The definition of the reservation.
     */
    public bookingsV1ReservationsByIdPutWithRawHttp(params: bookingsV1ReservationsByIdPutParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.bookingsV1ReservationsByIdPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Get reservations with filters
     * Use this to get reservations matching the given filter criteria.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param propertyIds Return reservations for specific properties
     * @param ratePlanIds Return reservations with specific rate plans
     * @param unitIds Return reservations with specific units assigned
     * @param unitTypeIds Return reservations with specific unit types
     * @param statuses Return reservations where the status is one of the specified values
     * @param from Start date and time for the selected date filter
     * @param to End date and time for the selected date filter
     * @param dateFilter Filter by date and time attributes of reservation. The &#39;to&#39; and &#39;from&#39; dates will then define the date and time range.
     */
    public bookingsV1ReservationsGetWithRawHttp(params: bookingsV1ReservationsGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.ReservationListModel>> {
        return this.bookingsV1ReservationsGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Creates a reservation
     * Use this call to create a new reservation.
     * @param requestBody The definition of the reservation.
     */
    public bookingsV1ReservationsPostWithRawHttp(params: bookingsV1ReservationsPostParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.ReservationCreatedModel>> {
        return this.bookingsV1ReservationsPostWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Return total count of reservations
     * Return total count of reservations, filtered by the parameters
     * @param propertyIds Return reservations for specific properties
     * @param ratePlanIds Return reservations with specific rate plans
     * @param unitIds Return reservations with specific units assigned
     * @param unitTypeIds Return reservations with specific unit types
     * @param statuses Return reservations where the status is one of the specified values
     * @param from Start date and time for the selected date filter
     * @param to End date and time for the selected date filter
     * @param dateFilter Filter by date and time attributes of reservation. The &#39;to&#39; and &#39;from&#39; dates will then define the date and time range.
     */
    public bookingsV1ReservationscountGetWithRawHttp(params: bookingsV1ReservationscountGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<number>> {
        return this.bookingsV1ReservationscountGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Assign a unit to a reservation
     * Use this call to assign a unit to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.
     * @param id The id of the reservation.
     * @param requestBody The definition of a unit to be assigned.
     */
    private bookingsV1ReservationsByIdAssignUnitPostWithHttpInfo(params: bookingsV1ReservationsByIdAssignUnitPostParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/bookings/v1/reservations/${id}/assign-unit'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingsV1ReservationsByIdAssignUnitPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingsV1ReservationsByIdAssignUnitPostWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Check-in of a reservation
     * Use this call to check-in an existing reservation which is in status &#39;Confirmed&#39;.
     * @param id The id of the reservation.
     */
    private bookingsV1ReservationsByIdCheckinPostWithHttpInfo(params: bookingsV1ReservationsByIdCheckinPostParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/bookings/v1/reservations/${id}/checkin'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingsV1ReservationsByIdCheckinPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingsV1ReservationsByIdCheckinPostWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Check-out of a reservation
     * Use this call to check-out an existing reservation which is in status &#39;InHouse&#39;.
     * @param id The id of the reservation.
     */
    private bookingsV1ReservationsByIdCheckoutPostWithHttpInfo(params: bookingsV1ReservationsByIdCheckoutPostParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/bookings/v1/reservations/${id}/checkout'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingsV1ReservationsByIdCheckoutPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingsV1ReservationsByIdCheckoutPostWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Get a reservation
     * Get a reservation by id.
     * @param id The id of the reservation.
     */
    private bookingsV1ReservationsByIdGetWithHttpInfo(params: bookingsV1ReservationsByIdGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/bookings/v1/reservations/${id}'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingsV1ReservationsByIdGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingsV1ReservationsByIdGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Replace a reservation
     * Use this call to modify a reservation.
     * @param id The id of the reservation.
     * @param requestBody The definition of the reservation.
     */
    private bookingsV1ReservationsByIdPutWithHttpInfo(params: bookingsV1ReservationsByIdPutParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/bookings/v1/reservations/${id}'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingsV1ReservationsByIdPut.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling bookingsV1ReservationsByIdPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingsV1ReservationsByIdPutWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Get reservations with filters
     * Use this to get reservations matching the given filter criteria.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param propertyIds Return reservations for specific properties
     * @param ratePlanIds Return reservations with specific rate plans
     * @param unitIds Return reservations with specific units assigned
     * @param unitTypeIds Return reservations with specific unit types
     * @param statuses Return reservations where the status is one of the specified values
     * @param from Start date and time for the selected date filter
     * @param to End date and time for the selected date filter
     * @param dateFilter Filter by date and time attributes of reservation. The &#39;to&#39; and &#39;from&#39; dates will then define the date and time range.
     */
    private bookingsV1ReservationsGetWithHttpInfo(params: bookingsV1ReservationsGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/bookings/v1/reservations';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'pageNumber' is not null or undefined
        if (params.pageNumber === null || params.pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling bookingsV1ReservationsGet.');
        }
        // verify required parameter 'pageSize' is not null or undefined
        if (params.pageSize === null || params.pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling bookingsV1ReservationsGet.');
        }
        if (params.propertyIds) {
            queryParameters.set('propertyIds', params.propertyIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.ratePlanIds) {
            queryParameters.set('ratePlanIds', params.ratePlanIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitIds) {
            queryParameters.set('unitIds', params.unitIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitTypeIds) {
            queryParameters.set('unitTypeIds', params.unitTypeIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.statuses) {
            queryParameters.set('statuses', params.statuses.join(COLLECTION_FORMATS['csv']));
        }

        if (params.from !== undefined) {
            queryParameters.set('from', <any>params.from.toISOString());
        }

        if (params.to !== undefined) {
            queryParameters.set('to', <any>params.to.toISOString());
        }

        if (params.dateFilter !== undefined) {
            queryParameters.set('dateFilter', <any>params.dateFilter);
        }

        if (params.pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>params.pageNumber);
        }

        if (params.pageSize !== undefined) {
            queryParameters.set('pageSize', <any>params.pageSize);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingsV1ReservationsGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Creates a reservation
     * Use this call to create a new reservation.
     * @param requestBody The definition of the reservation.
     */
    private bookingsV1ReservationsPostWithHttpInfo(params: bookingsV1ReservationsPostParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/bookings/v1/reservations';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling bookingsV1ReservationsPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingsV1ReservationsPostWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Return total count of reservations
     * Return total count of reservations, filtered by the parameters
     * @param propertyIds Return reservations for specific properties
     * @param ratePlanIds Return reservations with specific rate plans
     * @param unitIds Return reservations with specific units assigned
     * @param unitTypeIds Return reservations with specific unit types
     * @param statuses Return reservations where the status is one of the specified values
     * @param from Start date and time for the selected date filter
     * @param to End date and time for the selected date filter
     * @param dateFilter Filter by date and time attributes of reservation. The &#39;to&#39; and &#39;from&#39; dates will then define the date and time range.
     */
    private bookingsV1ReservationscountGetWithHttpInfo(params: bookingsV1ReservationscountGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/bookings/v1/reservations/$count';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.propertyIds) {
            queryParameters.set('propertyIds', params.propertyIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.ratePlanIds) {
            queryParameters.set('ratePlanIds', params.ratePlanIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitIds) {
            queryParameters.set('unitIds', params.unitIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitTypeIds) {
            queryParameters.set('unitTypeIds', params.unitTypeIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.statuses) {
            queryParameters.set('statuses', params.statuses.join(COLLECTION_FORMATS['csv']));
        }

        if (params.from !== undefined) {
            queryParameters.set('from', <any>params.from.toISOString());
        }

        if (params.to !== undefined) {
            queryParameters.set('to', <any>params.to.toISOString());
        }

        if (params.dateFilter !== undefined) {
            queryParameters.set('dateFilter', <any>params.dateFilter);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingsV1ReservationscountGetWithHttpInfo(params, $options);
            }
        )
    }

}
