/**
 * Apaleo Finance API
 * Everything around the Folio, Invioces and Accounting.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                              from '@angular/forms';
import { IBuildFormOptions, IApaleoPropertyMetaData }          from '../../types';
import { ResponseModel }                                       from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup } from '../../functions.model';

export interface LineItemModel {
    /**
     * Id for Line Items. This is unique within one folio.
     */
    id: string;

    /**
     * Status: is this already posted?
     */
    isPosted: boolean;

    /**
     * A link to the folio this item has been moved from. There always is a corresponding entry in the other folio.
     */
    movedFrom?: models.EmbeddedFolioModel;

    /**
     * A link to the folio this item has been moved to. There always is a corresponding entry in the other folio.
     */
    movedTo?: models.EmbeddedFolioModel;

    /**
     * Specifies the tax that applies to this line item. We only keep a link to the real thing here, as the actual numbers might change.
     */
    taxId?: string;

    /**
     * The net price of this line item. Use the information in the tax id to calculate the gross value.<br />  The folio also has some convenience functions for this.
     */
    netPrice?: number;

}

export type LineItemModelWithRawHttp = LineItemModel & ResponseModel<LineItemModel>;

export namespace LineItemModel {
    export const $metaData = { 
        id: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        isPosted: Object.freeze({ 
            isRequired: true,
            type: 'boolean',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        movedFrom: Object.freeze({ 
            type: 'models.EmbeddedFolioModel',
        } as IApaleoPropertyMetaData),
        movedTo: Object.freeze({ 
            type: 'models.EmbeddedFolioModel',
        } as IApaleoPropertyMetaData),
        taxId: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
        netPrice: Object.freeze({ 
            type: 'number',
            isPrimitiveType: true,
        } as IApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: IBuildFormOptions<LineItemModel>): FormGroup {
        const defaultControls = { 
            id: getControl($metaData.id, options, 'id'),
            isPosted: getControl($metaData.isPosted, options, 'isPosted'),
            movedFrom: models.EmbeddedFolioModel.$buildForm(fb),
            movedTo: models.EmbeddedFolioModel.$buildForm(fb),
            taxId: getControl($metaData.taxId, options, 'taxId'),
            netPrice: getControl($metaData.netPrice, options, 'netPrice'),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

