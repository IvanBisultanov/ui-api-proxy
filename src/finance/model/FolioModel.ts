/**
 * Apaleo Finance API
 * Everything around the Folio, Invoices and Accounting.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface FolioModel {
    /**
     * The id of the folio.
     */
    id: string;

    /**
     * The folio type.
     */
    type?: FolioModel.TypeEnum;

    /**
     * The person or company the folio is assigned to (that is, the one who comsumes and pays for everything).
     */
    debitor: models.FolioDebitorModel;

    /**
     * The reservation linked to this folio.
     */
    reservation?: models.EmbeddedReservationModel;

    /**
     * The property linked to this folio.
     */
    property: models.EmbeddedPropertyModel;

    /**
     * The list of charges.
     */
    charges?: Array<models.LineItemModel>;

    /**
     * The list of payments.
     */
    payments?: Array<models.PaymentModel>;

    /**
     * The total balance of the folio.
     */
    balance?: models.MonetaryValueModel;

}
export namespace FolioModel {
    export enum TypeEnumSet {
        House = 'House',
        Guest = 'Guest'
    }

    export type TypeEnum = 'House' | 'Guest';

    export const TypeEnumValues = Object.freeze(
        ['House', 'Guest'] as TypeEnum[]);
}

export type FolioModelWithRawHttp = FolioModel & ResponseModel<FolioModel>;

export namespace FolioModel {
    export const $metaData = { 
        id: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        type: Object.freeze({ 
            type: 'string',
            isEnum: true,
            allowedEnumValues: TypeEnumValues,
            isPrimitiveType: true,
        } as ApaleoEnumPropertyMetaData<TypeEnum>),
        debitor: Object.freeze({ 
            isRequired: true,
            type: 'models.FolioDebitorModel',
        } as ApaleoPropertyMetaData),
        reservation: Object.freeze({ 
            type: 'models.EmbeddedReservationModel',
        } as ApaleoPropertyMetaData),
        property: Object.freeze({ 
            isRequired: true,
            type: 'models.EmbeddedPropertyModel',
        } as ApaleoPropertyMetaData),
        charges: Object.freeze({ 
            type: 'Array<models.LineItemModel>',
            isListContainer: true,
        } as ApaleoPropertyMetaData),
        payments: Object.freeze({ 
            type: 'Array<models.PaymentModel>',
            isListContainer: true,
        } as ApaleoPropertyMetaData),
        balance: Object.freeze({ 
            type: 'models.MonetaryValueModel',
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<FolioModel>): FormGroup {
        const defaultControls = { 
            id: getControl($metaData.id, options, 'id'),
            type: getControl($metaData.type, options, 'type'),
            debitor: models.FolioDebitorModel.$buildForm(fb),
            reservation: models.EmbeddedReservationModel.$buildForm(fb),
            property: models.EmbeddedPropertyModel.$buildForm(fb),
            balance: models.MonetaryValueModel.$buildForm(fb),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

