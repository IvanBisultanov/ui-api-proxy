/**
 * Apaleo Finance API
 * Everything around the Folio, Invoices and Accounting.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface PreviewInvoiceModel {
    /**
     * The current date in the property's timezone.
     */
    invoiceDate: Date;

    /**
     * The folio this invoice preview was requested for.
     */
    folioId: string;

    /**
     * The issuer of the invoice (which is the company assosiated with the property).
     */
    from: models.InvoicePartnerModel;

    /**
     * The recipient of the invoice (typically, the guest).
     */
    to: models.InvoicePartnerModel;

    /**
     * Information about the commercial and taxation registry of the property.
     */
    commercialInformation: models.CommercialInfoModel;

    /**
     * Optional bank account information, useful if payment via invoice is allowed.
     */
    bankAccount?: models.BankAccountModel;

    /**
     * Specification of the payment terms, as defined in the property.
     */
    paymentTerms: string;

    /**
     * A list of all line items which will appear on the invoice, plus the gross subtotal.
     */
    lineItems: models.InvoiceLineItemsModel;

    /**
     * A list of all payments.
     */
    payments: Array<models.PaymentModel>;

    /**
     * The subtotal, displaying net and tax amount for each VAT type.
     */
    taxDetails: Array<models.TaxDetailModel>;

}

export type PreviewInvoiceModelWithRawHttp = PreviewInvoiceModel & ResponseModel<PreviewInvoiceModel>;

export namespace PreviewInvoiceModel {
    export const $metaData = { 
        invoiceDate: Object.freeze({ 
            isRequired: true,
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        folioId: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        from: Object.freeze({ 
            isRequired: true,
            type: 'models.InvoicePartnerModel',
        } as ApaleoPropertyMetaData),
        to: Object.freeze({ 
            isRequired: true,
            type: 'models.InvoicePartnerModel',
        } as ApaleoPropertyMetaData),
        commercialInformation: Object.freeze({ 
            isRequired: true,
            type: 'models.CommercialInfoModel',
        } as ApaleoPropertyMetaData),
        bankAccount: Object.freeze({ 
            type: 'models.BankAccountModel',
        } as ApaleoPropertyMetaData),
        paymentTerms: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        lineItems: Object.freeze({ 
            isRequired: true,
            type: 'models.InvoiceLineItemsModel',
        } as ApaleoPropertyMetaData),
        payments: Object.freeze({ 
            isRequired: true,
            type: 'Array<models.PaymentModel>',
            isListContainer: true,
        } as ApaleoPropertyMetaData),
        taxDetails: Object.freeze({ 
            isRequired: true,
            type: 'Array<models.TaxDetailModel>',
            isListContainer: true,
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<PreviewInvoiceModel>): FormGroup {
        const defaultControls = { 
            invoiceDate: getControl($metaData.invoiceDate, options, 'invoiceDate'),
            folioId: getControl($metaData.folioId, options, 'folioId'),
            from: models.InvoicePartnerModel.$buildForm(fb),
            to: models.InvoicePartnerModel.$buildForm(fb),
            commercialInformation: models.CommercialInfoModel.$buildForm(fb),
            bankAccount: models.BankAccountModel.$buildForm(fb),
            paymentTerms: getControl($metaData.paymentTerms, options, 'paymentTerms'),
            lineItems: models.InvoiceLineItemsModel.$buildForm(fb),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

