/**
 * Apaleo Finance API
 * Everything around the Folio, Invioces and Accounting.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import { Observable }                                              from 'rxjs/Rx';
import 'rxjs/add/operator/map';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { IRequestOptions, ResponseModel }                          from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';

/* tslint:disable:no-unused-variable member-ordering */


export interface financeFoliosByIdGetParams {
    /**
     * The id of the folio.
     */
    id: string;
}
export interface financeFoliosGetParams {
    /**
     * Filter folio list by property id
     */
    propertyId?: string;
}
export interface financeFoliosPostParams {
    /**
     * The definition of the folio.
     */
    requestBody: models.CreateFolioModel;
}
export interface financeFolioscountGetParams {
    /**
     * Filter folio list by property id
     */
    propertyId?: string;
}

@Injectable()
export class FolioApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Returns one folio.
     * Get a folio by id.
     * @param id The id of the folio.
     */
    public financeFoliosByIdGet(params: financeFoliosByIdGetParams, $options?: IRequestOptions)
        : Observable<models.FolioModel | undefined> {
        return this.financeFoliosByIdGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Returns a list of all folios.
     * Returns a list of all folios.
     * @param propertyId Filter folio list by property id
     */
    public financeFoliosGet(params: financeFoliosGetParams, $options?: IRequestOptions)
        : Observable<models.FolioListModel | undefined> {
        return this.financeFoliosGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Creates a folio.
     * Creates a folio.
     * @param requestBody The definition of the folio.
     */
    public financeFoliosPost(params: financeFoliosPostParams, $options?: IRequestOptions)
        : Observable<models.FolioCreatedModel | undefined> {
        return this.financeFoliosPostWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Returns number of folios
     * Returns number of folios matching the filter criteria
     * @param propertyId Filter folio list by property id
     */
    public financeFolioscountGet(params: financeFolioscountGetParams, $options?: IRequestOptions)
        : Observable<models.CountModel | undefined> {
        return this.financeFolioscountGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Returns one folio.
     * Get a folio by id.
     * @param id The id of the folio.
     */
    public financeFoliosByIdGetWithRawHttp(params: financeFoliosByIdGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.FolioModel>> {
        return this.financeFoliosByIdGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Returns a list of all folios.
     * Returns a list of all folios.
     * @param propertyId Filter folio list by property id
     */
    public financeFoliosGetWithRawHttp(params: financeFoliosGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.FolioListModel>> {
        return this.financeFoliosGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Creates a folio.
     * Creates a folio.
     * @param requestBody The definition of the folio.
     */
    public financeFoliosPostWithRawHttp(params: financeFoliosPostParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.FolioCreatedModel>> {
        return this.financeFoliosPostWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Returns number of folios
     * Returns number of folios matching the filter criteria
     * @param propertyId Filter folio list by property id
     */
    public financeFolioscountGetWithRawHttp(params: financeFolioscountGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.CountModel>> {
        return this.financeFolioscountGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Returns one folio.
     * Get a folio by id.
     * @param id The id of the folio.
     */
    private financeFoliosByIdGetWithHttpInfo(params: financeFoliosByIdGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/finance/folios/${id}'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling financeFoliosByIdGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.financeFoliosByIdGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Returns a list of all folios.
     * Returns a list of all folios.
     * @param propertyId Filter folio list by property id
     */
    private financeFoliosGetWithHttpInfo(params: financeFoliosGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/finance/folios';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.propertyId !== undefined) {
            queryParameters.set('propertyId', <any>params.propertyId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.financeFoliosGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Creates a folio.
     * Creates a folio.
     * @param requestBody The definition of the folio.
     */
    private financeFoliosPostWithHttpInfo(params: financeFoliosPostParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/finance/folios';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling financeFoliosPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.financeFoliosPostWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Returns number of folios
     * Returns number of folios matching the filter criteria
     * @param propertyId Filter folio list by property id
     */
    private financeFolioscountGetWithHttpInfo(params: financeFolioscountGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/finance/folios/$count';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.propertyId !== undefined) {
            queryParameters.set('propertyId', <any>params.propertyId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.financeFolioscountGetWithHttpInfo(params, $options);
            }
        )
    }

}
