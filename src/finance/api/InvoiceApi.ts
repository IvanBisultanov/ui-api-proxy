/**
 * Apaleo Finance API
 * Everything around the Folio, Invoices and Accounting.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { ApaleoRequestOptions, ResponseModel }                     from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';



export namespace financeInvoicesPreviewGet {
    export interface Params {
        /**
        * The id of the folio for which the invoice should be created.
        */
        folioId?: string;
    }
    
}

@Injectable()
export class InvoiceApi {
    public readonly defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Gets an invoice preview for one specific folio.
     * 
     * @param folioId The id of the folio for which the invoice should be created.
     */
    public financeInvoicesPreviewGet(params: financeInvoicesPreviewGet.Params, $options?: ApaleoRequestOptions)
        : Observable<models.PreviewInvoiceModel | undefined> {
        return this.financeInvoicesPreviewGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Gets an invoice preview for one specific folio.
     * 
     * @param folioId The id of the folio for which the invoice should be created.
     */
    public financeInvoicesPreviewGetWithRawHttp(params: financeInvoicesPreviewGet.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<models.PreviewInvoiceModel>> {
        return this.financeInvoicesPreviewGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Gets an invoice preview for one specific folio.
     * 
     * @param folioId The id of the folio for which the invoice should be created.
     */
    private financeInvoicesPreviewGetWithHttpInfo(params: financeInvoicesPreviewGet.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/finance/invoices/preview';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.folioId !== undefined) {
            queryParameters.set('folioId', <any>params.folioId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.financeInvoicesPreviewGetWithHttpInfo(params, $options);
            }
        )
    }

}
