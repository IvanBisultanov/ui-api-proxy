/**
 * Apaleo Finance API
 * Everything around the Folio, Invoices and Accounting.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { ApaleoRequestOptions, ResponseModel }                     from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';



export namespace financeFolioActionsByIdPaymentsPost {
    export interface Params {
        /**
        * 
        */
        id: string;
        /**
        * 
        */
        payment: models.CreatePaymentModel;
    }
    
}
export namespace financeFolioActionsNightAuditPut {
    export interface Params {
        /**
        * Filter folio list by property id
        */
        propertyId?: string;
    }
    
}

@Injectable()
export class FolioActionsApi {
    public readonly defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * 
     * 
     * @param id 
     * @param payment 
     */
    public financeFolioActionsByIdPaymentsPost(params: financeFolioActionsByIdPaymentsPost.Params, $options?: ApaleoRequestOptions)
        : Observable<void> {
        return this.financeFolioActionsByIdPaymentsPostWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Performs the night audit for one property.
     * The night audit will post all outstanding items in the folio.
     * @param propertyId Filter folio list by property id
     */
    public financeFolioActionsNightAuditPut(params: financeFolioActionsNightAuditPut.Params, $options?: ApaleoRequestOptions)
        : Observable<void> {
        return this.financeFolioActionsNightAuditPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * 
     * 
     * @param id 
     * @param payment 
     */
    public financeFolioActionsByIdPaymentsPostWithRawHttp(params: financeFolioActionsByIdPaymentsPost.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.financeFolioActionsByIdPaymentsPostWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Performs the night audit for one property.
     * The night audit will post all outstanding items in the folio.
     * @param propertyId Filter folio list by property id
     */
    public financeFolioActionsNightAuditPutWithRawHttp(params: financeFolioActionsNightAuditPut.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.financeFolioActionsNightAuditPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * 
     * 
     * @param id 
     * @param payment 
     */
    private financeFolioActionsByIdPaymentsPostWithHttpInfo(params: financeFolioActionsByIdPaymentsPost.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/finance/folio-actions/${id}/payments'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling financeFolioActionsByIdPaymentsPost.');
        }
        // verify required parameter 'payment' is not null or undefined
        if (params.payment === null || params.payment === undefined) {
            throw new Error('Required parameter payment was null or undefined when calling financeFolioActionsByIdPaymentsPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json',
            'text/json',
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                body: params.payment == null ? '' : params.payment, // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.financeFolioActionsByIdPaymentsPostWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Performs the night audit for one property.
     * The night audit will post all outstanding items in the folio.
     * @param propertyId Filter folio list by property id
     */
    private financeFolioActionsNightAuditPutWithHttpInfo(params: financeFolioActionsNightAuditPut.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/finance/folio-actions/night-audit';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.propertyId !== undefined) {
            queryParameters.set('propertyId', <any>params.propertyId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.financeFolioActionsNightAuditPutWithHttpInfo(params, $options);
            }
        )
    }

}
