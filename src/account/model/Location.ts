/**
 * Apaleo Account API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { Validators, FormBuilder, ValidatorFn, FormGroup }          from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional } from '../../types';
import { ResponseModel }                                            from '../../models';

export interface Location {
    street: string;

    postalCode: string;

    city: string;

    countryCode: string;

}

export type LocationWithRawHttp = Location & ResponseModel<Location>;

export interface Location$Form<T> {
    street: T;
    postalCode: T;
    city: T;
    countryCode: T;
}

export interface Location$ValidatorFactories extends Location$Form<ValidatorsFactory> {}
export interface Location$ControlFactories extends Location$Form<ControlFactory> {}
export interface Location$Control extends Location$Form<Control | FormGroup> {}
export interface Location$ControlMetaData extends Location$Form<IApaleoControlMetaData> {}

export namespace Location {
    export const $validators: Location$ValidatorFactories = {
        street: (() => [
            Validators.required,
            
            
        ]),
        postalCode: (() => [
            Validators.required,
            
            
        ]),
        city: (() => [
            Validators.required,
            
            
        ]),
        countryCode: (() => [
            Validators.required,
            Validators.minLength(2),
            Validators.maxLength(2),
        ]),
    };

    export const $controls: Location$ControlFactories = {
        street: (() => [null, Validators.compose($validators.street())]),
        postalCode: (() => [null, Validators.compose($validators.postalCode())]),
        city: (() => [null, Validators.compose($validators.city())]),
        countryCode: (() => [null, Validators.compose($validators.countryCode())]),
    };

    export const $metaData: Location$ControlMetaData = {
        street: {
            
            
            type: 'string',
            
        },
        postalCode: {
            
            
            type: 'string',
            
        },
        city: {
            
            
            type: 'string',
            
        },
        countryCode: {
            
            maxLength: 2,
            type: 'string',
            
        },
    };

    export function $buildForm(fb: FormBuilder, specificControls?: Optional<Location$Control>, additionalControls?: { [name: string]: (Control | FormGroup) }) {
        const defaultControls = {
            street: $controls.street(),
            postalCode: $controls.postalCode(),
            city: $controls.city(),
            countryCode: $controls.countryCode(),
        };

        const group = fb.group(Object.assign(defaultControls, specificControls, additionalControls));

    
        const streetCtrl: IApaleoAbstractControl = <any>group.controls['street'];
        streetCtrl.apaleoMetaData = $metaData.street;
    
    
        const postalCodeCtrl: IApaleoAbstractControl = <any>group.controls['postalCode'];
        postalCodeCtrl.apaleoMetaData = $metaData.postalCode;
    
    
        const cityCtrl: IApaleoAbstractControl = <any>group.controls['city'];
        cityCtrl.apaleoMetaData = $metaData.city;
    
    
        const countryCodeCtrl: IApaleoAbstractControl = <any>group.controls['countryCode'];
        countryCodeCtrl.apaleoMetaData = $metaData.countryCode;
    

        return group;
    }
}

