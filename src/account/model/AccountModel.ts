/**
 * Apaleo Account API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

/**
 * With this request you can create a new account
 */
import { Validators, FormBuilder, ValidatorFn, FormGroup }          from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional } from '../../types';
import { ResponseModel }                                            from '../../models';

export interface AccountModel {
    /**
     * The code for the account that can be shown in reports and table views
     */
    code?: string;

    /**
     * The name for the account, which usually should be the company name
     */
    name?: string;

    /**
     * The description for the account
     */
    description?: string;

    /**
     * The URL of the account logo
     */
    logoUrl?: string;

    /**
     * The location of the account
     */
    location?: models.Location;

}

export type AccountModelWithRawHttp = AccountModel & ResponseModel<AccountModel>;

export interface AccountModel$Form<T> {
    code: T;
    name: T;
    description: T;
    logoUrl: T;
    location: T;
}

export interface AccountModel$ValidatorFactories extends AccountModel$Form<ValidatorsFactory> {}
export interface AccountModel$ControlFactories extends AccountModel$Form<ControlFactory> {}
export interface AccountModel$Control extends AccountModel$Form<Control | FormGroup> {}
export interface AccountModel$ControlMetaData extends AccountModel$Form<IApaleoControlMetaData> {}

export namespace AccountModel {
    export const $validators: AccountModel$ValidatorFactories = {
        code: (() => [
            
            
            
        ]),
        name: (() => [
            
            
            
        ]),
        description: (() => [
            
            
            
        ]),
        logoUrl: (() => [
            
            
            
        ]),
        location: (() => [
            
            
            
        ]),
    };

    export const $controls: AccountModel$ControlFactories = {
        code: (() => [null, Validators.compose($validators.code())]),
        name: (() => [null, Validators.compose($validators.name())]),
        description: (() => [null, Validators.compose($validators.description())]),
        logoUrl: (() => [null, Validators.compose($validators.logoUrl())]),
        location: (() => [null, Validators.compose($validators.location())]),
    };

    export const $metaData: AccountModel$ControlMetaData = {
        code: {
            
            
            type: 'string',
            
        },
        name: {
            
            
            type: 'string',
            
        },
        description: {
            
            
            type: 'string',
            
        },
        logoUrl: {
            
            
            type: 'string',
            
        },
        location: {
            
        },
    };

    export function $buildForm(fb: FormBuilder, specificControls?: Optional<AccountModel$Control>, additionalControls?: { [name: string]: (Control | FormGroup) }) {
        const defaultControls = {
            code: $controls.code(),
            name: $controls.name(),
            description: $controls.description(),
            logoUrl: $controls.logoUrl(),
            location: models.Location.$buildForm(fb),
        };

        const group = fb.group(Object.assign(defaultControls, specificControls, additionalControls));

    
        const codeCtrl: IApaleoAbstractControl = <any>group.controls['code'];
        codeCtrl.apaleoMetaData = $metaData.code;
    
    
        const nameCtrl: IApaleoAbstractControl = <any>group.controls['name'];
        nameCtrl.apaleoMetaData = $metaData.name;
    
    
        const descriptionCtrl: IApaleoAbstractControl = <any>group.controls['description'];
        descriptionCtrl.apaleoMetaData = $metaData.description;
    
    
        const logoUrlCtrl: IApaleoAbstractControl = <any>group.controls['logoUrl'];
        logoUrlCtrl.apaleoMetaData = $metaData.logoUrl;
    
    

        return group;
    }
}

