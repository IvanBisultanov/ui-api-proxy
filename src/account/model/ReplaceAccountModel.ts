/**
 * Apaleo Account API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

/**
 * With this request you can modify an account
 */
import { Validators, FormBuilder, ValidatorFn, FormGroup, AbstractControl }  from '@angular/forms';
import { IBuildFormOptions, IControlFactoryOptions, Control }                from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData }                    from '../../types';
import { ResponseModel }                                                     from '../../models';
import { getControl, getControlOptions, adjustDefaultControls, setMetaData } from '../../functions';

export interface ReplaceAccountModel {
    /**
     * The name for the account, which usually should be the company name
     */
    name: string;

    /**
     * The description for the account
     */
    description: string;

    /**
     * The URL of the account logo
     */
    logoUrl?: string;

    /**
     * The location of the account
     */
    location: models.Location;

}

export type ReplaceAccountModelWithRawHttp = ReplaceAccountModel & ResponseModel<ReplaceAccountModel>;

export namespace ReplaceAccountModel {
    export const $validators = {
        name: (() => [
            Validators.required,
            Validators.maxLength(40),
        ]),
        description: (() => [
            Validators.required,
        ]),
        logoUrl: (() => [
        ]),
        location: (() => [
            Validators.required,
        ]),
    };

    export const $controls = { 
        name: ((options?: IControlFactoryOptions<string>) => getControl($validators.name(), options)),
        description: ((options?: IControlFactoryOptions<string>) => getControl($validators.description(), options)),
        logoUrl: ((options?: IControlFactoryOptions<string>) => getControl($validators.logoUrl(), options)),
    };

    export const $metaData = { 
        name: { 
            maxLength: 40,
            type: 'string',
        } as IApaleoControlMetaData,
        description: { 
            type: 'string',
        } as IApaleoControlMetaData,
        logoUrl: { 
            type: 'string',
        } as IApaleoControlMetaData,
    };

    export function $buildForm(fb: FormBuilder, options?: IBuildFormOptions<ReplaceAccountModel>) {
        const defaultControls = { 
            name: $controls.name(getControlOptions(options, 'name')),
            description: $controls.description(getControlOptions(options, 'description')),
            logoUrl: $controls.logoUrl(getControlOptions(options, 'logoUrl')),
            location: models.Location.$buildForm(fb),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options)!);

        setMetaData(<any>group.controls.name, $metaData.name);
        setMetaData(<any>group.controls.description, $metaData.description);
        setMetaData(<any>group.controls.logoUrl, $metaData.logoUrl);

        return group;
    }
}

