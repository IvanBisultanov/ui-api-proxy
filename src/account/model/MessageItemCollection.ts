/**
 * Apaleo Account API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { Validators, FormBuilder, ValidatorFn, FormGroup }          from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional } from '../../types';
import { ResponseModel }                                            from '../../models';

export interface MessageItemCollection {
    messages?: Array<string>;

}

export type MessageItemCollectionWithRawHttp = MessageItemCollection & ResponseModel<MessageItemCollection>;

export interface MessageItemCollection$Form<T> {
    messages: T;
}

export interface MessageItemCollection$ValidatorFactories extends MessageItemCollection$Form<ValidatorsFactory> {}
export interface MessageItemCollection$ControlFactories extends MessageItemCollection$Form<ControlFactory> {}
export interface MessageItemCollection$Control extends MessageItemCollection$Form<Control | FormGroup> {}
export interface MessageItemCollection$ControlMetaData extends MessageItemCollection$Form<IApaleoControlMetaData> {}

export namespace MessageItemCollection {
    export const $validators: MessageItemCollection$ValidatorFactories = {
        messages: (() => [
            
            
            
        ]),
    };

    export const $controls: MessageItemCollection$ControlFactories = {
        messages: (() => [null, Validators.compose($validators.messages())]),
    };

    export const $metaData: MessageItemCollection$ControlMetaData = {
        messages: {
            
        },
    };

    export function $buildForm(fb: FormBuilder, specificControls?: Optional<MessageItemCollection$Control>, additionalControls?: { [name: string]: (Control | FormGroup) }) {
        const defaultControls = {
        };

        const group = fb.group(Object.assign(defaultControls, specificControls, additionalControls));

    

        return group;
    }
}

