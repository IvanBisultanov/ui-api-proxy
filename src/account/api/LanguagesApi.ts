/**
 * Apaleo Account API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import { Observable }                                              from 'rxjs/Rx';
import 'rxjs/add/operator/map';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { IRequestOptions, ResponseModel }                          from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';

/* tslint:disable:no-unused-variable member-ordering */


export interface accountV1AccountsByCodeLanguagesGetParams {
    /**
     * The code of the account.
     */
    code: string;
}
export interface accountV1AccountsByCodeLanguagesPutParams {
    /**
     * The code of the account.
     */
    code: string;
    /**
     * The definition of the language settings.
     */
    requestBody: models.ReplaceLanguagesModel;
}

@Injectable()
export class LanguagesApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Get the language settings for the account
     * Get the language settings
     * @param code The code of the account.
     */
    public accountV1AccountsByCodeLanguagesGet(params: accountV1AccountsByCodeLanguagesGetParams, $options?: IRequestOptions)
        : Observable<models.LanguagesModel | undefined> {
        return this.accountV1AccountsByCodeLanguagesGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Replaces the language settings for the account
     * Use this call to modify the language settings of the account.
     * @param code The code of the account.
     * @param requestBody The definition of the language settings.
     */
    public accountV1AccountsByCodeLanguagesPut(params: accountV1AccountsByCodeLanguagesPutParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.accountV1AccountsByCodeLanguagesPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Get the language settings for the account
     * Get the language settings
     * @param code The code of the account.
     */
    public accountV1AccountsByCodeLanguagesGetWithRawHttp(params: accountV1AccountsByCodeLanguagesGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.LanguagesModel>> {
        return this.accountV1AccountsByCodeLanguagesGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Replaces the language settings for the account
     * Use this call to modify the language settings of the account.
     * @param code The code of the account.
     * @param requestBody The definition of the language settings.
     */
    public accountV1AccountsByCodeLanguagesPutWithRawHttp(params: accountV1AccountsByCodeLanguagesPutParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.accountV1AccountsByCodeLanguagesPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Get the language settings for the account
     * Get the language settings
     * @param code The code of the account.
     */
    private accountV1AccountsByCodeLanguagesGetWithHttpInfo(params: accountV1AccountsByCodeLanguagesGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/account/v1/accounts/${code}/languages'
                    .replace('${' + 'code' + '}', String(params.code));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'code' is not null or undefined
        if (params.code === null || params.code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling accountV1AccountsByCodeLanguagesGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.accountV1AccountsByCodeLanguagesGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Replaces the language settings for the account
     * Use this call to modify the language settings of the account.
     * @param code The code of the account.
     * @param requestBody The definition of the language settings.
     */
    private accountV1AccountsByCodeLanguagesPutWithHttpInfo(params: accountV1AccountsByCodeLanguagesPutParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/account/v1/accounts/${code}/languages'
                    .replace('${' + 'code' + '}', String(params.code));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'code' is not null or undefined
        if (params.code === null || params.code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling accountV1AccountsByCodeLanguagesPut.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling accountV1AccountsByCodeLanguagesPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.accountV1AccountsByCodeLanguagesPutWithHttpInfo(params, $options);
            }
        )
    }

}
