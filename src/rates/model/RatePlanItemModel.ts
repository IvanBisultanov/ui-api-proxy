/**
 * Rates Management
 * Manage the rate plans and rates to rent out your inventory at the best price.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface RatePlanItemModel {
    /**
     * The rateplan id
     */
    id: string;

    /**
     * The code for the rateplan that can be shown in reports and table views
     */
    code: string;

    /**
     * The name for the rateplan
     */
    name: string;

    /**
     * The description for the rateplan
     */
    description: string;

    /**
     * The way the defined rates are applied when an offer is calculated for this rate plan
     */
    sellingUnit: RatePlanItemModel.SellingUnitEnum;

    /**
     * The id of the property to which the rateplan belongs to
     */
    propertyId: string;

    /**
     * The unit types ids linked to the rateplan
     */
    unitTypeIds?: Array<string>;

    /**
     * Collection of links to related resources
     */
    links?: { [key: string]: models.Link; };

}
export namespace RatePlanItemModel {
    export enum SellingUnitEnumSet {
        Night = 'Night',
        Day = 'Day'
    }

    export type SellingUnitEnum = 'Night' | 'Day';

    export const SellingUnitEnumValues = Object.freeze(
        ['Night', 'Day'] as SellingUnitEnum[]);
}

export type RatePlanItemModelWithRawHttp = RatePlanItemModel & ResponseModel<RatePlanItemModel>;

export namespace RatePlanItemModel {
    export const $metaData = { 
        id: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        code: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        name: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        description: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        sellingUnit: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isEnum: true,
            allowedEnumValues: SellingUnitEnumValues,
            isPrimitiveType: true,
        } as ApaleoEnumPropertyMetaData<SellingUnitEnum>),
        propertyId: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        unitTypeIds: Object.freeze({ 
            type: 'Array<string>',
            isPrimitiveType: true,
            isListContainer: true,
        } as ApaleoPropertyMetaData),
        links: Object.freeze({ 
            type: '{ [key: string]: models.Link; }',
            isMapContainer: true,
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<RatePlanItemModel>): FormGroup {
        const defaultControls = { 
            id: getControl($metaData.id, options, 'id'),
            code: getControl($metaData.code, options, 'code'),
            name: getControl($metaData.name, options, 'name'),
            description: getControl($metaData.description, options, 'description'),
            sellingUnit: getControl($metaData.sellingUnit, options, 'sellingUnit'),
            propertyId: getControl($metaData.propertyId, options, 'propertyId'),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

