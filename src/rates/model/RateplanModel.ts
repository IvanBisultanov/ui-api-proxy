/**
 * Apaleo Rates API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { Validators, FormBuilder, ValidatorFn, FormGroup, AbstractControl } from '@angular/forms';
import { IBuildFormOptions, IControlFactoryOptions, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData }                   from '../../types';
import { ResponseModel }                                                    from '../../models';
import { getControl, getControlOptions, adjustDefaultControls }             from '../../functions';

export interface RateplanModel {
    /**
     * The rateplan id
     */
    id?: string;

    /**
     * The code for the rateplan that can be shown in reports and table views
     */
    code?: string;

    /**
     * The name for the rateplan
     */
    name?: { [key: string]: string; };

    /**
     * The description for the rateplan
     */
    description?: { [key: string]: string; };

    /**
     * The default price for the rateplan
     */
    defaultPrice?: number;

    /**
     * The property to which the rateplan belongs to
     */
    property?: models.EmbeddedPropertyModel;

}

export type RateplanModelWithRawHttp = RateplanModel & ResponseModel<RateplanModel>;

export namespace RateplanModel {
    export const $validators = {
        id: (() => [
        ]),
        code: (() => [
        ]),
        name: (() => [
        ]),
        description: (() => [
        ]),
        defaultPrice: (() => [
        ]),
        property: (() => [
        ]),
    };

    export const $controls = { 
        id: ((options?: IControlFactoryOptions<string>) => getControl($validators.id(), options)),
        code: ((options?: IControlFactoryOptions<string>) => getControl($validators.code(), options)),
        defaultPrice: ((options?: IControlFactoryOptions<number>) => getControl($validators.defaultPrice(), options)),
    };

    export const $metaData = { 
        id: { 
            type: 'string',
        } as IApaleoControlMetaData,
        code: { 
            type: 'string',
        } as IApaleoControlMetaData,
        name: { 
            type: '{ [key: string]: string; }',
        } as IApaleoControlMetaData,
        description: { 
            type: '{ [key: string]: string; }',
        } as IApaleoControlMetaData,
        defaultPrice: { 
            type: 'number',
        } as IApaleoControlMetaData,
    };

    export function $buildForm(fb: FormBuilder, options?: IBuildFormOptions<RateplanModel>) {
        const defaultControls = { 
            id: $controls.id(getControlOptions(options, 'id')),
            code: $controls.code(getControlOptions(options, 'code')),
            defaultPrice: $controls.defaultPrice(getControlOptions(options, 'defaultPrice')),
            property: models.EmbeddedPropertyModel.$buildForm(fb),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options)!);

        (<IApaleoAbstractControl><any>group.controls['id']).apaleoMetaData = $metaData.id;
        (<IApaleoAbstractControl><any>group.controls['code']).apaleoMetaData = $metaData.code;
        (<IApaleoAbstractControl><any>group.controls['defaultPrice']).apaleoMetaData = $metaData.defaultPrice;

        return group;
    }
}

