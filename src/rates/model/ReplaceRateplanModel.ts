/**
 * Apaleo Rates API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { Validators, FormBuilder, ValidatorFn, FormGroup }          from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional } from '../../types';
import { ResponseModel }                                            from '../../models';

export interface ReplaceRateplanModel {
    /**
     * The name for the rateplan
     */
    name: { [key: string]: string; };

    /**
     * The default price for the rateplan
     */
    defaultPrice: number;

}

export type ReplaceRateplanModelWithRawHttp = ReplaceRateplanModel & ResponseModel<ReplaceRateplanModel>;

export interface ReplaceRateplanModel$Form<T> {
    name: T;
    defaultPrice: T;
}

export interface ReplaceRateplanModel$ValidatorFactories extends ReplaceRateplanModel$Form<ValidatorsFactory> {}
export interface ReplaceRateplanModel$ControlFactories extends ReplaceRateplanModel$Form<ControlFactory> {}
export interface ReplaceRateplanModel$Control extends ReplaceRateplanModel$Form<Control | FormGroup> {}
export interface ReplaceRateplanModel$ControlMetaData extends ReplaceRateplanModel$Form<IApaleoControlMetaData> {}

export namespace ReplaceRateplanModel {
    export const $validators: ReplaceRateplanModel$ValidatorFactories = {
        name: (() => [
            Validators.required,
            
            
        ]),
        defaultPrice: (() => [
            Validators.required,
            
            
        ]),
    };

    export const $controls: ReplaceRateplanModel$ControlFactories = {
        name: (() => [null, Validators.compose($validators.name())]),
        defaultPrice: (() => [null, Validators.compose($validators.defaultPrice())]),
    };

    export const $metaData: ReplaceRateplanModel$ControlMetaData = {
        name: {
            
            
            type: '{ [key: string]: string; }',
            
        },
        defaultPrice: {
            
            
            type: 'number',
            
        },
    };

    export function $buildForm(fb: FormBuilder, specificControls?: Optional<ReplaceRateplanModel$Control>, additionalControls?: { [name: string]: (Control | FormGroup) }) {
        const defaultControls = {
            name: $controls.name(),
            defaultPrice: $controls.defaultPrice(),
        };

        const group = fb.group(Object.assign(defaultControls, specificControls, additionalControls));

    
        const nameCtrl: IApaleoAbstractControl = <any>group.controls['name'];
        nameCtrl.apaleoMetaData = $metaData.name;
    
    
        const defaultPriceCtrl: IApaleoAbstractControl = <any>group.controls['defaultPrice'];
        defaultPriceCtrl.apaleoMetaData = $metaData.defaultPrice;
    

        return group;
    }
}

