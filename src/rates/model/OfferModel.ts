/**
 * Apaleo Rates API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { Validators, FormBuilder, ValidatorFn, FormGroup }          from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional } from '../../types';
import { ResponseModel }                                            from '../../models';

export interface OfferModel {
    /**
     * The unit type for which the following offers apply
     */
    unitTypeCode?: string;

    /**
     * The rate plan for this offer
     */
    rateplanCode?: string;

    /**
     * The price for the whole stay
     */
    price?: number;

}

export type OfferModelWithRawHttp = OfferModel & ResponseModel<OfferModel>;

export interface OfferModel$Form<T> {
    unitTypeCode: T;
    rateplanCode: T;
    price: T;
}

export interface OfferModel$ValidatorFactories extends OfferModel$Form<ValidatorsFactory> {}
export interface OfferModel$ControlFactories extends OfferModel$Form<ControlFactory> {}
export interface OfferModel$Control extends OfferModel$Form<Control | FormGroup> {}
export interface OfferModel$ControlMetaData extends OfferModel$Form<IApaleoControlMetaData> {}

export namespace OfferModel {
    export const $validators: OfferModel$ValidatorFactories = {
        unitTypeCode: (() => [
            
            
            
        ]),
        rateplanCode: (() => [
            
            
            
        ]),
        price: (() => [
            
            
            
        ]),
    };

    export const $controls: OfferModel$ControlFactories = {
        unitTypeCode: (() => [null, Validators.compose($validators.unitTypeCode())]),
        rateplanCode: (() => [null, Validators.compose($validators.rateplanCode())]),
        price: (() => [null, Validators.compose($validators.price())]),
    };

    export const $metaData: OfferModel$ControlMetaData = {
        unitTypeCode: {
            
            
            type: 'string',
            
        },
        rateplanCode: {
            
            
            type: 'string',
            
        },
        price: {
            
            
            type: 'number',
            
        },
    };

    export function $buildForm(fb: FormBuilder, specificControls?: Optional<OfferModel$Control>, additionalControls?: { [name: string]: (Control | FormGroup) }) {
        const defaultControls = {
            unitTypeCode: $controls.unitTypeCode(),
            rateplanCode: $controls.rateplanCode(),
            price: $controls.price(),
        };

        const group = fb.group(Object.assign(defaultControls, specificControls, additionalControls));

    
        const unitTypeCodeCtrl: IApaleoAbstractControl = <any>group.controls['unitTypeCode'];
        unitTypeCodeCtrl.apaleoMetaData = $metaData.unitTypeCode;
    
    
        const rateplanCodeCtrl: IApaleoAbstractControl = <any>group.controls['rateplanCode'];
        rateplanCodeCtrl.apaleoMetaData = $metaData.rateplanCode;
    
    
        const priceCtrl: IApaleoAbstractControl = <any>group.controls['price'];
        priceCtrl.apaleoMetaData = $metaData.price;
    

        return group;
    }
}

