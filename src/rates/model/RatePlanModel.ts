/**
 * Rates Management
 * Manage the rate plans and rates to rent out your inventory at the best price.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface RatePlanModel {
    /**
     * The rateplan id
     */
    id: string;

    /**
     * The code for the rateplan that can be shown in reports and table views
     */
    code: string;

    /**
     * The name for the rateplan
     */
    name: { [key: string]: string; };

    /**
     * The description for the rateplan
     */
    description: { [key: string]: string; };

    /**
     * The way the defined rates are applied when an offer is calculated for this rate plan
     */
    sellingUnit: RatePlanModel.SellingUnitEnum;

    /**
     * The time slice definition for the rate plan
     */
    timeSliceDefinition: models.EmbeddedTimeSliceDefinitionModel;

    /**
     * The property to which the rateplan belongs to
     */
    property: models.EmbeddedPropertyModel;

    /**
     * Unit types linked to the rateplan
     */
    unitTypes?: Array<models.EmbeddedUnitTypeModel>;

}
export namespace RatePlanModel {
    export enum SellingUnitEnumSet {
        Night = 'Night',
        Day = 'Day'
    }

    export type SellingUnitEnum = 'Night' | 'Day';

    export const SellingUnitEnumValues = Object.freeze(
        ['Night', 'Day'] as SellingUnitEnum[]);
}

export type RatePlanModelWithRawHttp = RatePlanModel & ResponseModel<RatePlanModel>;

export namespace RatePlanModel {
    export const $metaData = { 
        id: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        code: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        name: Object.freeze({ 
            isRequired: true,
            type: '{ [key: string]: string; }',
            isPrimitiveType: true,
            isMapContainer: true,
        } as ApaleoPropertyMetaData),
        description: Object.freeze({ 
            isRequired: true,
            type: '{ [key: string]: string; }',
            isPrimitiveType: true,
            isMapContainer: true,
        } as ApaleoPropertyMetaData),
        sellingUnit: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isEnum: true,
            allowedEnumValues: SellingUnitEnumValues,
            isPrimitiveType: true,
        } as ApaleoEnumPropertyMetaData<SellingUnitEnum>),
        timeSliceDefinition: Object.freeze({ 
            isRequired: true,
            type: 'models.EmbeddedTimeSliceDefinitionModel',
        } as ApaleoPropertyMetaData),
        property: Object.freeze({ 
            isRequired: true,
            type: 'models.EmbeddedPropertyModel',
        } as ApaleoPropertyMetaData),
        unitTypes: Object.freeze({ 
            type: 'Array<models.EmbeddedUnitTypeModel>',
            isListContainer: true,
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<RatePlanModel>): FormGroup {
        const defaultControls = { 
            id: getControl($metaData.id, options, 'id'),
            code: getControl($metaData.code, options, 'code'),
            sellingUnit: getControl($metaData.sellingUnit, options, 'sellingUnit'),
            timeSliceDefinition: models.EmbeddedTimeSliceDefinitionModel.$buildForm(fb),
            property: models.EmbeddedPropertyModel.$buildForm(fb),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

