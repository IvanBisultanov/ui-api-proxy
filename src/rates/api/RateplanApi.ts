/**
 * Apaleo Rates API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional, LOCALE_ID }           from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { Configuration }                                     from '../../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class RateplanApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Archive a rateplan
     * Use this call to archive a rateplan.
     * @param id The id of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansByIdArchivePost(id: string, apaleoAccount: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.ratesV1RateplansByIdArchivePostWithHttpInfo(id, apaleoAccount, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Delete a rateplan
     * Use this call to delete a rateplan.
     * @param id The id of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansByIdDelete(id: string, apaleoAccount: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.ratesV1RateplansByIdDeleteWithHttpInfo(id, apaleoAccount, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a rateplan
     * Get a rateplan by code.
     * @param id The id of the rateplan.
     * @param apaleoAccount Account Code
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    public ratesV1RateplansByIdGet(id: string, apaleoAccount: string, languages?: string, extraHttpRequestParams?: any): Observable<models.RateplanModel> {
        return this.ratesV1RateplansByIdGetWithHttpInfo(id, apaleoAccount, languages, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Check if a rateplan exists
     * Check if a rateplan exists by id.
     * @param id The id of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansByIdHead(id: string, apaleoAccount: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.ratesV1RateplansByIdHeadWithHttpInfo(id, apaleoAccount, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Replace a rateplan
     * Use this call to modify a rateplan.
     * @param id The id of the rateplan.
     * @param requestBody The definition of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansByIdPut(id: string, requestBody: models.UpdateRateplanModel, apaleoAccount: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.ratesV1RateplansByIdPutWithHttpInfo(id, requestBody, apaleoAccount, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get a rateplan list
     * Get the list of rateplans.
     * @param apaleoAccount Account Code
     * @param archived Return only rateplans that have the given archived status
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    public ratesV1RateplansGet(apaleoAccount: string, archived?: boolean, languages?: string, extraHttpRequestParams?: any): Observable<models.RateplanListModel> {
        return this.ratesV1RateplansGetWithHttpInfo(apaleoAccount, archived, languages, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Create a rateplan
     * Use this call to create a new rateplan.
     * @param requestBody The definition of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansPost(requestBody: models.CreateRateplanModel, apaleoAccount: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.ratesV1RateplansPostWithHttpInfo(requestBody, apaleoAccount, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Archive a rateplan
     * Use this call to archive a rateplan.
     * @param id The id of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansByIdArchivePostWithHttpInfo(id: string, apaleoAccount: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/rates/v1/rateplans/${id}/archive`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RateplansByIdArchivePost.');
        }
        // verify required parameter 'apaleoAccount' is not null or undefined
        if (apaleoAccount === null || apaleoAccount === undefined) {
            throw new Error('Required parameter apaleoAccount was null or undefined when calling ratesV1RateplansByIdArchivePost.');
        }
        headers.set('Apaleo-Account', String(apaleoAccount));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Delete a rateplan
     * Use this call to delete a rateplan.
     * @param id The id of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansByIdDeleteWithHttpInfo(id: string, apaleoAccount: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/rates/v1/rateplans/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RateplansByIdDelete.');
        }
        // verify required parameter 'apaleoAccount' is not null or undefined
        if (apaleoAccount === null || apaleoAccount === undefined) {
            throw new Error('Required parameter apaleoAccount was null or undefined when calling ratesV1RateplansByIdDelete.');
        }
        headers.set('Apaleo-Account', String(apaleoAccount));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a rateplan
     * Get a rateplan by code.
     * @param id The id of the rateplan.
     * @param apaleoAccount Account Code
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    public ratesV1RateplansByIdGetWithHttpInfo(id: string, apaleoAccount: string, languages?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/rates/v1/rateplans/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RateplansByIdGet.');
        }
        // verify required parameter 'apaleoAccount' is not null or undefined
        if (apaleoAccount === null || apaleoAccount === undefined) {
            throw new Error('Required parameter apaleoAccount was null or undefined when calling ratesV1RateplansByIdGet.');
        }
        if (languages !== undefined) {
            if(<any>languages instanceof Date) {
                queryParameters.set('languages', (<Date><any>languages).toISOString());
            } else {
                queryParameters.set('languages', <any>languages);
            }
        }

        headers.set('Apaleo-Account', String(apaleoAccount));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Check if a rateplan exists
     * Check if a rateplan exists by id.
     * @param id The id of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansByIdHeadWithHttpInfo(id: string, apaleoAccount: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/rates/v1/rateplans/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RateplansByIdHead.');
        }
        // verify required parameter 'apaleoAccount' is not null or undefined
        if (apaleoAccount === null || apaleoAccount === undefined) {
            throw new Error('Required parameter apaleoAccount was null or undefined when calling ratesV1RateplansByIdHead.');
        }
        headers.set('Apaleo-Account', String(apaleoAccount));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Head,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Replace a rateplan
     * Use this call to modify a rateplan.
     * @param id The id of the rateplan.
     * @param requestBody The definition of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansByIdPutWithHttpInfo(id: string, requestBody: models.UpdateRateplanModel, apaleoAccount: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/rates/v1/rateplans/${id}`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RateplansByIdPut.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling ratesV1RateplansByIdPut.');
        }
        // verify required parameter 'apaleoAccount' is not null or undefined
        if (apaleoAccount === null || apaleoAccount === undefined) {
            throw new Error('Required parameter apaleoAccount was null or undefined when calling ratesV1RateplansByIdPut.');
        }
        headers.set('Apaleo-Account', String(apaleoAccount));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: requestBody == null ? '' : JSON.stringify(requestBody), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Get a rateplan list
     * Get the list of rateplans.
     * @param apaleoAccount Account Code
     * @param archived Return only rateplans that have the given archived status
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    public ratesV1RateplansGetWithHttpInfo(apaleoAccount: string, archived?: boolean, languages?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/rates/v1/rateplans`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'apaleoAccount' is not null or undefined
        if (apaleoAccount === null || apaleoAccount === undefined) {
            throw new Error('Required parameter apaleoAccount was null or undefined when calling ratesV1RateplansGet.');
        }
        if (archived !== undefined) {
            if(<any>archived instanceof Date) {
                queryParameters.set('archived', (<Date><any>archived).toISOString());
            } else {
                queryParameters.set('archived', <any>archived);
            }
        }

        if (languages !== undefined) {
            if(<any>languages instanceof Date) {
                queryParameters.set('languages', (<Date><any>languages).toISOString());
            } else {
                queryParameters.set('languages', <any>languages);
            }
        }

        headers.set('Apaleo-Account', String(apaleoAccount));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Create a rateplan
     * Use this call to create a new rateplan.
     * @param requestBody The definition of the rateplan.
     * @param apaleoAccount Account Code
     */
    public ratesV1RateplansPostWithHttpInfo(requestBody: models.CreateRateplanModel, apaleoAccount: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/rates/v1/rateplans`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling ratesV1RateplansPost.');
        }
        // verify required parameter 'apaleoAccount' is not null or undefined
        if (apaleoAccount === null || apaleoAccount === undefined) {
            throw new Error('Required parameter apaleoAccount was null or undefined when calling ratesV1RateplansPost.');
        }
        headers.set('Apaleo-Account', String(apaleoAccount));

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: requestBody == null ? '' : JSON.stringify(requestBody), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
