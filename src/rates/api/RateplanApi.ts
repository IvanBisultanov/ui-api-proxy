/**
 * Apaleo Rates API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional, LOCALE_ID }           from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Rx';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/delay';
import 'rxjs/add/operator/catch';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { IRequestOptions, ResponseModel, ResponseHeaders }   from '../../models';
import { Configuration }                                     from '../../configuration';
import { callApiEndpoint }                                   from '../../functions';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class RateplanApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Delete a rateplan
     * Use this call to delete a rateplan.
     * @param id The id of the rateplan.
     */
    public ratesV1RatePlansByIdDelete(id: string, $options?: IRequestOptions)
        : Observable<void> {
        return this.ratesV1RatePlansByIdDeleteWithRawHttp(id, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Get a rateplan
     * Get a rateplan by id.
     * @param id The id of the rateplan.
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    public ratesV1RatePlansByIdGet(id: string, languages?: string, $options?: IRequestOptions)
        : Observable<models.RateplanModel | undefined> {
        return this.ratesV1RatePlansByIdGetWithRawHttp(id, languages, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Check if a rateplan exists
     * Check if a rateplan exists by id.
     * @param id The id of the rateplan.
     */
    public ratesV1RatePlansByIdHead(id: string, $options?: IRequestOptions)
        : Observable<void> {
        return this.ratesV1RatePlansByIdHeadWithRawHttp(id, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Replace a rateplan
     * Use this call to modify a rateplan.
     * @param id The id of the rateplan.
     * @param requestBody The definition of the rateplan.
     */
    public ratesV1RatePlansByIdPut(id: string, requestBody: models.ReplaceRateplanModel, $options?: IRequestOptions)
        : Observable<void> {
        return this.ratesV1RatePlansByIdPutWithRawHttp(id, requestBody, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Get a rateplan list
     * Get the list of rateplans.
     * @param propertyId Return rate plans for specific property
     */
    public ratesV1RatePlansGet(propertyId?: string, $options?: IRequestOptions)
        : Observable<models.RateplanListModel | undefined> {
        return this.ratesV1RatePlansGetWithRawHttp(propertyId, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Create a rateplan
     * Use this call to create a new rateplan.
     * @param requestBody The definition of the rateplan.
     */
    public ratesV1RatePlansPost(requestBody: models.CreateRateplanModel, $options?: IRequestOptions)
        : Observable<models.RateplanCreatedModel | undefined> {
        return this.ratesV1RatePlansPostWithRawHttp(requestBody, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Delete a rateplan
     * Use this call to delete a rateplan.
     * @param id The id of the rateplan.
     */
    public ratesV1RatePlansByIdDeleteWithRawHttp(id: string, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.ratesV1RatePlansByIdDeleteWithHttpInfo(id, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Get a rateplan
     * Get a rateplan by id.
     * @param id The id of the rateplan.
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    public ratesV1RatePlansByIdGetWithRawHttp(id: string, languages?: string, $options?: IRequestOptions)
        : Observable<ResponseModel<models.RateplanModel>> {
        return this.ratesV1RatePlansByIdGetWithHttpInfo(id, languages, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Check if a rateplan exists
     * Check if a rateplan exists by id.
     * @param id The id of the rateplan.
     */
    public ratesV1RatePlansByIdHeadWithRawHttp(id: string, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.ratesV1RatePlansByIdHeadWithHttpInfo(id, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Replace a rateplan
     * Use this call to modify a rateplan.
     * @param id The id of the rateplan.
     * @param requestBody The definition of the rateplan.
     */
    public ratesV1RatePlansByIdPutWithRawHttp(id: string, requestBody: models.ReplaceRateplanModel, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.ratesV1RatePlansByIdPutWithHttpInfo(id, requestBody, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Get a rateplan list
     * Get the list of rateplans.
     * @param propertyId Return rate plans for specific property
     */
    public ratesV1RatePlansGetWithRawHttp(propertyId?: string, $options?: IRequestOptions)
        : Observable<ResponseModel<models.RateplanListModel>> {
        return this.ratesV1RatePlansGetWithHttpInfo(propertyId, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Create a rateplan
     * Use this call to create a new rateplan.
     * @param requestBody The definition of the rateplan.
     */
    public ratesV1RatePlansPostWithRawHttp(requestBody: models.CreateRateplanModel, $options?: IRequestOptions)
        : Observable<ResponseModel<models.RateplanCreatedModel>> {
        return this.ratesV1RatePlansPostWithHttpInfo(requestBody, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Delete a rateplan
     * Use this call to delete a rateplan.
     * @param id The id of the rateplan.
     */
    private ratesV1RatePlansByIdDeleteWithHttpInfo(id: string, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/rates/v1/rate-plans/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RatePlansByIdDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Delete,
                headers: headers,
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.ratesV1RatePlansByIdDeleteWithHttpInfo(id, $options);
            }
        )
    }

    /**
     * Get a rateplan
     * Get a rateplan by id.
     * @param id The id of the rateplan.
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    private ratesV1RatePlansByIdGetWithHttpInfo(id: string, languages?: string, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/rates/v1/rate-plans/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RatePlansByIdGet.');
        }
        if (languages !== undefined) {
            queryParameters.set('languages', <any>languages);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.ratesV1RatePlansByIdGetWithHttpInfo(id, languages, $options);
            }
        )
    }

    /**
     * Check if a rateplan exists
     * Check if a rateplan exists by id.
     * @param id The id of the rateplan.
     */
    private ratesV1RatePlansByIdHeadWithHttpInfo(id: string, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/rates/v1/rate-plans/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RatePlansByIdHead.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Head,
                headers: headers,
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.ratesV1RatePlansByIdHeadWithHttpInfo(id, $options);
            }
        )
    }

    /**
     * Replace a rateplan
     * Use this call to modify a rateplan.
     * @param id The id of the rateplan.
     * @param requestBody The definition of the rateplan.
     */
    private ratesV1RatePlansByIdPutWithHttpInfo(id: string, requestBody: models.ReplaceRateplanModel, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/rates/v1/rate-plans/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling ratesV1RatePlansByIdPut.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling ratesV1RatePlansByIdPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                body: requestBody == null ? '' : JSON.stringify(requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.ratesV1RatePlansByIdPutWithHttpInfo(id, requestBody, $options);
            }
        )
    }

    /**
     * Get a rateplan list
     * Get the list of rateplans.
     * @param propertyId Return rate plans for specific property
     */
    private ratesV1RatePlansGetWithHttpInfo(propertyId?: string, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/rates/v1/rate-plans';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (propertyId !== undefined) {
            queryParameters.set('propertyId', <any>propertyId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.ratesV1RatePlansGetWithHttpInfo(propertyId, $options);
            }
        )
    }

    /**
     * Create a rateplan
     * Use this call to create a new rateplan.
     * @param requestBody The definition of the rateplan.
     */
    private ratesV1RatePlansPostWithHttpInfo(requestBody: models.CreateRateplanModel, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/rates/v1/rate-plans';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling ratesV1RatePlansPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                body: requestBody == null ? '' : JSON.stringify(requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.ratesV1RatePlansPostWithHttpInfo(requestBody, $options);
            }
        )
    }

}
