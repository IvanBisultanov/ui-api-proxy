/**
 * Apaleo Inventory API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import { Observable }                                              from 'rxjs/Rx';
import 'rxjs/add/operator/map';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { IRequestOptions, ResponseModel }                          from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class UnitAvailabilityApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Get an available units list
     * Get the list of available units for a specifed time period in the future.&lt;br /&gt;  The time for the from and to filters are optional. If no time for from is specified the max of  default check-in time of the property and the current time will be used. If no time for to  is specified the default check-out time of the property will be used
     * @param propertyId The property id
     * @param fromDate The date in the format yyyy-MM-dd
     * @param toDate The date in the format yyyy-MM-dd
     * @param unitTypeId The unit type id
     * @param fromTime The time in the format HH:mm
     * @param toTime The time in the format HH:mm
     */
    public inventoryV1UnitsAvailableGet(propertyId: string, fromDate: Date, toDate: Date, unitTypeId?: string, fromTime?: string, toTime?: string, $options?: IRequestOptions)
        : Observable<models.UnitListModel | undefined> {
        return this.inventoryV1UnitsAvailableGetWithRawHttp(propertyId, fromDate, toDate, unitTypeId, fromTime, toTime, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Get an available units list
     * Get the list of available units for a specifed time period in the future.&lt;br /&gt;  The time for the from and to filters are optional. If no time for from is specified the max of  default check-in time of the property and the current time will be used. If no time for to  is specified the default check-out time of the property will be used
     * @param propertyId The property id
     * @param fromDate The date in the format yyyy-MM-dd
     * @param toDate The date in the format yyyy-MM-dd
     * @param unitTypeId The unit type id
     * @param fromTime The time in the format HH:mm
     * @param toTime The time in the format HH:mm
     */
    public inventoryV1UnitsAvailableGetWithRawHttp(propertyId: string, fromDate: Date, toDate: Date, unitTypeId?: string, fromTime?: string, toTime?: string, $options?: IRequestOptions)
        : Observable<ResponseModel<models.UnitListModel>> {
        return this.inventoryV1UnitsAvailableGetWithHttpInfo(propertyId, fromDate, toDate, unitTypeId, fromTime, toTime, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Get an available units list
     * Get the list of available units for a specifed time period in the future.&lt;br /&gt;  The time for the from and to filters are optional. If no time for from is specified the max of  default check-in time of the property and the current time will be used. If no time for to  is specified the default check-out time of the property will be used
     * @param propertyId The property id
     * @param fromDate The date in the format yyyy-MM-dd
     * @param toDate The date in the format yyyy-MM-dd
     * @param unitTypeId The unit type id
     * @param fromTime The time in the format HH:mm
     * @param toTime The time in the format HH:mm
     */
    private inventoryV1UnitsAvailableGetWithHttpInfo(propertyId: string, fromDate: Date, toDate: Date, unitTypeId?: string, fromTime?: string, toTime?: string, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/inventory/v1/units/available';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'propertyId' is not null or undefined
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling inventoryV1UnitsAvailableGet.');
        }
        // verify required parameter 'fromDate' is not null or undefined
        if (fromDate === null || fromDate === undefined) {
            throw new Error('Required parameter fromDate was null or undefined when calling inventoryV1UnitsAvailableGet.');
        }
        // verify required parameter 'toDate' is not null or undefined
        if (toDate === null || toDate === undefined) {
            throw new Error('Required parameter toDate was null or undefined when calling inventoryV1UnitsAvailableGet.');
        }
        if (propertyId !== undefined) {
            queryParameters.set('propertyId', <any>propertyId);
        }

        if (unitTypeId !== undefined) {
            queryParameters.set('unitTypeId', <any>unitTypeId);
        }

        if (fromDate !== undefined) {
            queryParameters.set('from.Date', <any>fromDate.toISOString());
        }

        if (fromTime !== undefined) {
            queryParameters.set('from.Time', <any>fromTime);
        }

        if (toDate !== undefined) {
            queryParameters.set('to.Date', <any>toDate.toISOString());
        }

        if (toTime !== undefined) {
            queryParameters.set('to.Time', <any>toTime);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryV1UnitsAvailableGetWithHttpInfo(propertyId, fromDate, toDate, unitTypeId, fromTime, toTime, $options);
            }
        )
    }

}
