/**
 * Apaleo Inventory API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional, LOCALE_ID }           from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Rx';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/delay';
import 'rxjs/add/operator/catch';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../../variables';
import { IRequestOptions, ResponseModel, ResponseHeaders }   from '../../models';
import { Configuration }                                     from '../../configuration';
import { callApiEndpoint }                                   from '../../functions';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class UnitApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Get a unit
     * Get a unit by id.
     * @param id The id of the unit.
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    public inventoryV1UnitsByIdGet(id: string, languages?: string, $options?: IRequestOptions)
        : Observable<models.UnitModel | undefined> {
        return this.inventoryV1UnitsByIdGetWithRawHttp(id, languages, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Check if a unit exists
     * Check if a unit exists by id.
     * @param id The id of the unit.
     */
    public inventoryV1UnitsByIdHead(id: string, $options?: IRequestOptions)
        : Observable<void> {
        return this.inventoryV1UnitsByIdHeadWithRawHttp(id, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Replace a unit
     * Use this call to modify a unit.
     * @param id The id of the unit.
     * @param requestBody The definition of the unit.
     */
    public inventoryV1UnitsByIdPut(id: string, requestBody: models.ReplaceUnitModel, $options?: IRequestOptions)
        : Observable<void> {
        return this.inventoryV1UnitsByIdPutWithRawHttp(id, requestBody, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Get a units list
     * Get the list of units.
     * @param propertyId Return units for specific property
     * @param unitTypeId Return units for the specific unit type
     */
    public inventoryV1UnitsGet(propertyId?: string, unitTypeId?: string, $options?: IRequestOptions)
        : Observable<models.UnitListModel | undefined> {
        return this.inventoryV1UnitsGetWithRawHttp(propertyId, unitTypeId, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Create a unit
     * Use this call to create a new unit.
     * @param requestBody The definition of the unit.
     */
    public inventoryV1UnitsPost(requestBody: models.CreateUnitModel, $options?: IRequestOptions)
        : Observable<models.UnitCreatedModel | undefined> {
        return this.inventoryV1UnitsPostWithRawHttp(requestBody, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Get a unit
     * Get a unit by id.
     * @param id The id of the unit.
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    public inventoryV1UnitsByIdGetWithRawHttp(id: string, languages?: string, $options?: IRequestOptions)
        : Observable<ResponseModel<models.UnitModel>> {
        return this.inventoryV1UnitsByIdGetWithHttpInfo(id, languages, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Check if a unit exists
     * Check if a unit exists by id.
     * @param id The id of the unit.
     */
    public inventoryV1UnitsByIdHeadWithRawHttp(id: string, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.inventoryV1UnitsByIdHeadWithHttpInfo(id, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Replace a unit
     * Use this call to modify a unit.
     * @param id The id of the unit.
     * @param requestBody The definition of the unit.
     */
    public inventoryV1UnitsByIdPutWithRawHttp(id: string, requestBody: models.ReplaceUnitModel, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.inventoryV1UnitsByIdPutWithHttpInfo(id, requestBody, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Get a units list
     * Get the list of units.
     * @param propertyId Return units for specific property
     * @param unitTypeId Return units for the specific unit type
     */
    public inventoryV1UnitsGetWithRawHttp(propertyId?: string, unitTypeId?: string, $options?: IRequestOptions)
        : Observable<ResponseModel<models.UnitListModel>> {
        return this.inventoryV1UnitsGetWithHttpInfo(propertyId, unitTypeId, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Create a unit
     * Use this call to create a new unit.
     * @param requestBody The definition of the unit.
     */
    public inventoryV1UnitsPostWithRawHttp(requestBody: models.CreateUnitModel, $options?: IRequestOptions)
        : Observable<ResponseModel<models.UnitCreatedModel>> {
        return this.inventoryV1UnitsPostWithHttpInfo(requestBody, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Get a unit
     * Get a unit by id.
     * @param id The id of the unit.
     * @param languages &#39;all&#39; or comma separated list of language codes
     */
    private inventoryV1UnitsByIdGetWithHttpInfo(id: string, languages?: string, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/inventory/v1/units/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling inventoryV1UnitsByIdGet.');
        }
        if (languages !== undefined) {
            queryParameters.set('languages', <any>languages);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryV1UnitsByIdGetWithHttpInfo(id, languages, $options);
            }
        )
    }

    /**
     * Check if a unit exists
     * Check if a unit exists by id.
     * @param id The id of the unit.
     */
    private inventoryV1UnitsByIdHeadWithHttpInfo(id: string, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/inventory/v1/units/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling inventoryV1UnitsByIdHead.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Head,
                headers: headers,
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryV1UnitsByIdHeadWithHttpInfo(id, $options);
            }
        )
    }

    /**
     * Replace a unit
     * Use this call to modify a unit.
     * @param id The id of the unit.
     * @param requestBody The definition of the unit.
     */
    private inventoryV1UnitsByIdPutWithHttpInfo(id: string, requestBody: models.ReplaceUnitModel, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/inventory/v1/units/${id}'
                    .replace('${' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling inventoryV1UnitsByIdPut.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling inventoryV1UnitsByIdPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                body: requestBody == null ? '' : JSON.stringify(requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryV1UnitsByIdPutWithHttpInfo(id, requestBody, $options);
            }
        )
    }

    /**
     * Get a units list
     * Get the list of units.
     * @param propertyId Return units for specific property
     * @param unitTypeId Return units for the specific unit type
     */
    private inventoryV1UnitsGetWithHttpInfo(propertyId?: string, unitTypeId?: string, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/inventory/v1/units';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (propertyId !== undefined) {
            queryParameters.set('propertyId', <any>propertyId);
        }

        if (unitTypeId !== undefined) {
            queryParameters.set('unitTypeId', <any>unitTypeId);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryV1UnitsGetWithHttpInfo(propertyId, unitTypeId, $options);
            }
        )
    }

    /**
     * Create a unit
     * Use this call to create a new unit.
     * @param requestBody The definition of the unit.
     */
    private inventoryV1UnitsPostWithHttpInfo(requestBody: models.CreateUnitModel, $options?: IRequestOptions): Observable<Response> {
        const path = this.basePath + '/inventory/v1/units';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'requestBody' is not null or undefined
        if (requestBody === null || requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling inventoryV1UnitsPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                body: requestBody == null ? '' : JSON.stringify(requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryV1UnitsPostWithHttpInfo(requestBody, $options);
            }
        )
    }

}
