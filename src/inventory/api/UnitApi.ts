/**
 * Inventory Management
 * Set up hotels, rooms, room categories and other units in the portfolio.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import { Observable }                                              from 'rxjs/Rx';
import 'rxjs/add/operator/map';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { IRequestOptions, ResponseModel }                          from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';

/* tslint:disable:no-unused-variable member-ordering */


export interface inventoryUnitsByIdGetParams {
    /**
     * The id of the unit.
     */
    id: string;
    /**
     * 'all' or comma separated list of language codes
     */
    languages?: Array<string>;
    /**
     * List of all embedded resources that should be expanded in the response. Possible values are: property, unitType. All other values will be silently ignored.
     */
    expand?: string;
}
export interface inventoryUnitsByIdHeadParams {
    /**
     * The id of the unit.
     */
    id: string;
}
export interface inventoryUnitsByIdPutParams {
    /**
     * The id of the unit.
     */
    id: string;
    /**
     * The definition of the unit.
     */
    requestBody: models.ReplaceUnitModel;
}
export interface inventoryUnitsGetParams {
    /**
     * Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     */
    pageNumber: number;
    /**
     * Page size
     */
    pageSize: number;
    /**
     * Return units for specific property
     */
    propertyId?: string;
    /**
     * Return units for the specific unit type
     */
    unitTypeId?: string;
}
export interface inventoryUnitsPostParams {
    /**
     * The definition of the unit.
     */
    requestBody: models.CreateUnitModel;
}

@Injectable()
export class UnitApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Get a unit
     * Get a unit by id.
     * @param id The id of the unit.
     * @param languages &#39;all&#39; or comma separated list of language codes
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property, unitType. All other values will be silently ignored.
     */
    public inventoryUnitsByIdGet(params: inventoryUnitsByIdGetParams, $options?: IRequestOptions)
        : Observable<models.UnitModel | undefined> {
        return this.inventoryUnitsByIdGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Check if a unit exists
     * Check if a unit exists by id.
     * @param id The id of the unit.
     */
    public inventoryUnitsByIdHead(params: inventoryUnitsByIdHeadParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.inventoryUnitsByIdHeadWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Replace a unit
     * Use this call to modify a unit.
     * @param id The id of the unit.
     * @param requestBody The definition of the unit.
     */
    public inventoryUnitsByIdPut(params: inventoryUnitsByIdPutParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.inventoryUnitsByIdPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Get a units list
     * Get the list of units.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param propertyId Return units for specific property
     * @param unitTypeId Return units for the specific unit type
     */
    public inventoryUnitsGet(params: inventoryUnitsGetParams, $options?: IRequestOptions)
        : Observable<models.UnitListModel | undefined> {
        return this.inventoryUnitsGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Create a unit
     * Use this call to create a new unit.
     * @param requestBody The definition of the unit.
     */
    public inventoryUnitsPost(params: inventoryUnitsPostParams, $options?: IRequestOptions)
        : Observable<models.UnitCreatedModel | undefined> {
        return this.inventoryUnitsPostWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Return total count of units
     * Return total count of units
     */
    public inventoryUnitscountGet($options?: IRequestOptions)
        : Observable<number | undefined> {
        return this.inventoryUnitscountGetWithRawHttp($options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Get a unit
     * Get a unit by id.
     * @param id The id of the unit.
     * @param languages &#39;all&#39; or comma separated list of language codes
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property, unitType. All other values will be silently ignored.
     */
    public inventoryUnitsByIdGetWithRawHttp(params: inventoryUnitsByIdGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.UnitModel>> {
        return this.inventoryUnitsByIdGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Check if a unit exists
     * Check if a unit exists by id.
     * @param id The id of the unit.
     */
    public inventoryUnitsByIdHeadWithRawHttp(params: inventoryUnitsByIdHeadParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.inventoryUnitsByIdHeadWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Replace a unit
     * Use this call to modify a unit.
     * @param id The id of the unit.
     * @param requestBody The definition of the unit.
     */
    public inventoryUnitsByIdPutWithRawHttp(params: inventoryUnitsByIdPutParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.inventoryUnitsByIdPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Get a units list
     * Get the list of units.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param propertyId Return units for specific property
     * @param unitTypeId Return units for the specific unit type
     */
    public inventoryUnitsGetWithRawHttp(params: inventoryUnitsGetParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.UnitListModel>> {
        return this.inventoryUnitsGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Create a unit
     * Use this call to create a new unit.
     * @param requestBody The definition of the unit.
     */
    public inventoryUnitsPostWithRawHttp(params: inventoryUnitsPostParams, $options?: IRequestOptions)
        : Observable<ResponseModel<models.UnitCreatedModel>> {
        return this.inventoryUnitsPostWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Return total count of units
     * Return total count of units
     */
    public inventoryUnitscountGetWithRawHttp($options?: IRequestOptions)
        : Observable<ResponseModel<number>> {
        return this.inventoryUnitscountGetWithHttpInfo($options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Get a unit
     * Get a unit by id.
     * @param id The id of the unit.
     * @param languages &#39;all&#39; or comma separated list of language codes
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property, unitType. All other values will be silently ignored.
     */
    private inventoryUnitsByIdGetWithHttpInfo(params: inventoryUnitsByIdGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/inventory/units/${id}'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling inventoryUnitsByIdGet.');
        }
        if (params.languages) {
            queryParameters.set('languages', params.languages.join(COLLECTION_FORMATS['csv']));
        }

        if (params.expand !== undefined) {
            queryParameters.set('expand', <any>params.expand);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryUnitsByIdGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Check if a unit exists
     * Check if a unit exists by id.
     * @param id The id of the unit.
     */
    private inventoryUnitsByIdHeadWithHttpInfo(params: inventoryUnitsByIdHeadParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/inventory/units/${id}'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling inventoryUnitsByIdHead.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Head,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryUnitsByIdHeadWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Replace a unit
     * Use this call to modify a unit.
     * @param id The id of the unit.
     * @param requestBody The definition of the unit.
     */
    private inventoryUnitsByIdPutWithHttpInfo(params: inventoryUnitsByIdPutParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/inventory/units/${id}'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling inventoryUnitsByIdPut.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling inventoryUnitsByIdPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryUnitsByIdPutWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Get a units list
     * Get the list of units.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param propertyId Return units for specific property
     * @param unitTypeId Return units for the specific unit type
     */
    private inventoryUnitsGetWithHttpInfo(params: inventoryUnitsGetParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/inventory/units';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'pageNumber' is not null or undefined
        if (params.pageNumber === null || params.pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling inventoryUnitsGet.');
        }
        // verify required parameter 'pageSize' is not null or undefined
        if (params.pageSize === null || params.pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling inventoryUnitsGet.');
        }
        if (params.propertyId !== undefined) {
            queryParameters.set('propertyId', <any>params.propertyId);
        }

        if (params.unitTypeId !== undefined) {
            queryParameters.set('unitTypeId', <any>params.unitTypeId);
        }

        if (params.pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>params.pageNumber);
        }

        if (params.pageSize !== undefined) {
            queryParameters.set('pageSize', <any>params.pageSize);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryUnitsGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Create a unit
     * Use this call to create a new unit.
     * @param requestBody The definition of the unit.
     */
    private inventoryUnitsPostWithHttpInfo(params: inventoryUnitsPostParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/inventory/units';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling inventoryUnitsPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryUnitsPostWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Return total count of units
     * Return total count of units
     */
    private inventoryUnitscountGetWithHttpInfo($options?: IRequestOptions): Observable<Response> {

        const path = this.basePath + '/inventory/units/$count';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.inventoryUnitscountGetWithHttpInfo($options);
            }
        )
    }

}
