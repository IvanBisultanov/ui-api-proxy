/**
 * Apaleo Inventory API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { Validators, FormBuilder, ValidatorFn, FormGroup }          from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional } from '../../types';
import { ResponseModel }                                            from '../../models';

export interface ReplaceUnitTypeModel {
    /**
     * The name for the unit type
     */
    name: { [key: string]: string; };

    /**
     * The description for the unit type
     */
    description: { [key: string]: string; };

    /**
     * Minimum number of persons for the unit type
     */
    minPersons: number;

    /**
     * Maximum number of persons for the unit type
     */
    maxPersons: number;

}

export type ReplaceUnitTypeModelWithRawHttp = ReplaceUnitTypeModel & ResponseModel<ReplaceUnitTypeModel>;

export interface ReplaceUnitTypeModel$Form<T> {
    name: T;
    description: T;
    minPersons: T;
    maxPersons: T;
}

export interface ReplaceUnitTypeModel$ValidatorFactories extends ReplaceUnitTypeModel$Form<ValidatorsFactory> {}
export interface ReplaceUnitTypeModel$ControlFactories extends ReplaceUnitTypeModel$Form<ControlFactory> {}
export interface ReplaceUnitTypeModel$Control extends ReplaceUnitTypeModel$Form<Control | FormGroup> {}
export interface ReplaceUnitTypeModel$ControlMetaData extends ReplaceUnitTypeModel$Form<IApaleoControlMetaData> {}

export namespace ReplaceUnitTypeModel {
    export const $validators: ReplaceUnitTypeModel$ValidatorFactories = {
        name: (() => [
            Validators.required,
            
            
        ]),
        description: (() => [
            Validators.required,
            
            
        ]),
        minPersons: (() => [
            Validators.required,
            
            
        ]),
        maxPersons: (() => [
            Validators.required,
            
            
        ]),
    };

    export const $controls: ReplaceUnitTypeModel$ControlFactories = {
        name: (() => [null, Validators.compose($validators.name())]),
        description: (() => [null, Validators.compose($validators.description())]),
        minPersons: (() => [null, Validators.compose($validators.minPersons())]),
        maxPersons: (() => [null, Validators.compose($validators.maxPersons())]),
    };

    export const $metaData: ReplaceUnitTypeModel$ControlMetaData = {
        name: {
            
            
            type: '{ [key: string]: string; }',
            
        },
        description: {
            
            
            type: '{ [key: string]: string; }',
            
        },
        minPersons: {
            
            
            type: 'number',
            
        },
        maxPersons: {
            
            
            type: 'number',
            
        },
    };

    export function $buildForm(fb: FormBuilder, specificControls?: Optional<ReplaceUnitTypeModel$Control>, additionalControls?: { [name: string]: (Control | FormGroup) }) {
        const defaultControls = {
            name: $controls.name(),
            description: $controls.description(),
            minPersons: $controls.minPersons(),
            maxPersons: $controls.maxPersons(),
        };

        const group = fb.group(Object.assign(defaultControls, specificControls, additionalControls));

    
        const nameCtrl: IApaleoAbstractControl = <any>group.controls['name'];
        nameCtrl.apaleoMetaData = $metaData.name;
    
    
        const descriptionCtrl: IApaleoAbstractControl = <any>group.controls['description'];
        descriptionCtrl.apaleoMetaData = $metaData.description;
    
    
        const minPersonsCtrl: IApaleoAbstractControl = <any>group.controls['minPersons'];
        minPersonsCtrl.apaleoMetaData = $metaData.minPersons;
    
    
        const maxPersonsCtrl: IApaleoAbstractControl = <any>group.controls['maxPersons'];
        maxPersonsCtrl.apaleoMetaData = $metaData.maxPersons;
    

        return group;
    }
}

