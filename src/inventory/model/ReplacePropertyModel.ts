/**
 * Apaleo Inventory API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

/**
 * With this request you can modify a property
 */
import { Validators, FormBuilder, ValidatorFn, FormGroup }                      from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control, IApaleoAbstractControl }   from '../../types';
import { ResponseModel }                                                        from '../../models';

export interface ReplacePropertyModel {
    /**
     * The name for the property
     */
    name: { [key: string]: string; };

    /**
     * The description for the property
     */
    description: { [key: string]: string; };

    /**
     * The location of the property
     */
    location: models.Location;

}

export type ReplacePropertyModelWithRawHttp = ReplacePropertyModel & ResponseModel<ReplacePropertyModel>;

export interface ReplacePropertyModel$Form<T> {
    name: T;
    description: T;
    location: T;
}

export interface ReplacePropertyModel$ValidatorFactories extends ReplacePropertyModel$Form<ValidatorsFactory> {}
export interface ReplacePropertyModel$ControlFactories extends ReplacePropertyModel$Form<ControlFactory> {}

const $validators: ReplacePropertyModel$ValidatorFactories = {
    name: (() => [
        Validators.required,
        
        
    ]),
    description: (() => [
        Validators.required,
        
        
    ]),
    location: (() => [
        Validators.required,
        
        
    ]),
}

const $controls: ReplacePropertyModel$ControlFactories = {
    name: (() => [null, Validators.compose($validators.name())]),
    description: (() => [null, Validators.compose($validators.description())]),
    location: (() => [null, Validators.compose($validators.location())]),
}

export const ReplacePropertyModel = {
    $validators: $validators,
    $controls: $controls,
    $buildForm: ((fb: FormBuilder) => {
        const group = fb.group({
            name: $controls.name(),
            description: $controls.description(),
            location: models.Location.$buildForm(fb),
        });

    
    
    

        return group;
    })
}

