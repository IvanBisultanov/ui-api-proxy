/**
 * Inventory Management
 * Setup and manage the accountâ€™s properties and all the units to rent out: rooms, parking lots, beds, meeting rooms, etc.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

/**
 * With this request you can create a new property
 */
import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface PropertyModel {
    /**
     * The property id
     */
    id: string;

    /**
     * The code for the property that can be shown in reports and table views
     */
    code: string;

    /**
     * The name for the property
     */
    name: { [key: string]: string; };

    /**
     * The legal name of the company running the property.
     */
    companyName: string;

    /**
     * The managing director(s) of the company, as they should appear on invoices
     */
    managingDirectors?: string;

    /**
     * The entry in the Commercial Reigster of the company running the property, as it should appear on invoices
     */
    commercialRegisterEntry?: string;

    /**
     * The Tax-ID of the company running the property, as it should appear on invoices
     */
    taxId: string;

    /**
     * The description for the property
     */
    description?: { [key: string]: string; };

    /**
     * The location of the property
     */
    location: models.AddressModel;

    bankAccount?: models.BankAccountModel;

    /**
     * The payment terms used for all rate plans
     */
    paymentTerms: { [key: string]: string; };

    /**
     * The time zone
     */
    timeZone: string;

    /**
     * The default check-in time
     */
    defaultCheckInTime: string;

    /**
     * The default check-out time
     */
    defaultCheckOutTime: string;

    /**
     * The currency a property works with.
     */
    currency?: string;

}

export type PropertyModelWithRawHttp = PropertyModel & ResponseModel<PropertyModel>;

export namespace PropertyModel {
    export const $metaData = { 
        id: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        code: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        name: Object.freeze({ 
            isRequired: true,
            type: '{ [key: string]: string; }',
            isPrimitiveType: true,
            isMapContainer: true,
        } as ApaleoPropertyMetaData),
        companyName: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        managingDirectors: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        commercialRegisterEntry: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        taxId: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        description: Object.freeze({ 
            type: '{ [key: string]: string; }',
            isPrimitiveType: true,
            isMapContainer: true,
        } as ApaleoPropertyMetaData),
        location: Object.freeze({ 
            isRequired: true,
            type: 'models.AddressModel',
        } as ApaleoPropertyMetaData),
        bankAccount: Object.freeze({ 
            type: 'models.BankAccountModel',
        } as ApaleoPropertyMetaData),
        paymentTerms: Object.freeze({ 
            isRequired: true,
            type: '{ [key: string]: string; }',
            isPrimitiveType: true,
            isMapContainer: true,
        } as ApaleoPropertyMetaData),
        timeZone: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        defaultCheckInTime: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        defaultCheckOutTime: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        currency: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<PropertyModel>): FormGroup {
        const defaultControls = { 
            id: getControl($metaData.id, options, 'id'),
            code: getControl($metaData.code, options, 'code'),
            companyName: getControl($metaData.companyName, options, 'companyName'),
            managingDirectors: getControl($metaData.managingDirectors, options, 'managingDirectors'),
            commercialRegisterEntry: getControl($metaData.commercialRegisterEntry, options, 'commercialRegisterEntry'),
            taxId: getControl($metaData.taxId, options, 'taxId'),
            location: models.AddressModel.$buildForm(fb),
            bankAccount: models.BankAccountModel.$buildForm(fb),
            timeZone: getControl($metaData.timeZone, options, 'timeZone'),
            defaultCheckInTime: getControl($metaData.defaultCheckInTime, options, 'defaultCheckInTime'),
            defaultCheckOutTime: getControl($metaData.defaultCheckOutTime, options, 'defaultCheckOutTime'),
            currency: getControl($metaData.currency, options, 'currency'),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

