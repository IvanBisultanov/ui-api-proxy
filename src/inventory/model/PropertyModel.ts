/**
 * Apaleo Inventory API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

/**
 * With this request you can create a new property
 */
import { Validators, FormBuilder, ValidatorFn, FormGroup }          from '@angular/forms';
import { ValidatorsFactory, ControlFactory, Control }               from '../../types';
import { IApaleoAbstractControl, IApaleoControlMetaData, Optional } from '../../types';
import { ResponseModel }                                            from '../../models';

export interface PropertyModel {
    /**
     * The code for the property that can be shown in reports and table views
     */
    code?: string;

    /**
     * The name for the property
     */
    name?: { [key: string]: string; };

    /**
     * The description for the property
     */
    description?: { [key: string]: string; };

    /**
     * The location of the property
     */
    location?: models.Location;

}

export type PropertyModelWithRawHttp = PropertyModel & ResponseModel<PropertyModel>;

export interface PropertyModel$Form<T> {
    code: T;
    name: T;
    description: T;
    location: T;
}

export interface PropertyModel$ValidatorFactories extends PropertyModel$Form<ValidatorsFactory> {}
export interface PropertyModel$ControlFactories extends PropertyModel$Form<ControlFactory> {}
export interface PropertyModel$Control extends PropertyModel$Form<Control | FormGroup> {}
export interface PropertyModel$ControlMetaData extends PropertyModel$Form<IApaleoControlMetaData> {}

const $validators: PropertyModel$ValidatorFactories = {
    code: (() => [
        
        
        
    ]),
    name: (() => [
        
        
        
    ]),
    description: (() => [
        
        
        
    ]),
    location: (() => [
        
        
        
    ]),
}

const $controls: PropertyModel$ControlFactories = {
    code: (() => [null, Validators.compose($validators.code())]),
    name: (() => [null, Validators.compose($validators.name())]),
    description: (() => [null, Validators.compose($validators.description())]),
    location: (() => [null, Validators.compose($validators.location())]),
}

const $metaData: PropertyModel$ControlMetaData = {
    code: {
        
        
        type: 'string',
        
    },
    name: {
        
        
        type: '{ [key: string]: string; }',
        
    },
    description: {
        
        
        type: '{ [key: string]: string; }',
        
    },
    location: {
        
    },
}

export const PropertyModel = {
    $validators: $validators,
    $controls: $controls,
    $metaData: $metaData,
    $buildForm: ((fb: FormBuilder, specificControls?: Optional<PropertyModel$Control>, additionalControls?: { [name: string]: (Control | FormGroup) }) => {
        const defaultControls = {
            code: $controls.code(),
            name: $controls.name(),
            description: $controls.description(),
            location: models.Location.$buildForm(fb),
        };

        const group = fb.group(Object.assign(defaultControls, specificControls, additionalControls));

    
        const codeCtrl: IApaleoAbstractControl = <any>group.controls['code'];
        codeCtrl.apaleoMetaData = $metaData.code;
    
    
        const nameCtrl: IApaleoAbstractControl = <any>group.controls['name'];
        nameCtrl.apaleoMetaData = $metaData.name;
    
    
        const descriptionCtrl: IApaleoAbstractControl = <any>group.controls['description'];
        descriptionCtrl.apaleoMetaData = $metaData.description;
    
    

        return group;
    })
}

