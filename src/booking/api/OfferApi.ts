/**
 * Booking
 * Resources and methods to manage guest journeys.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { ApaleoRequestOptions, ResponseModel }                     from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';



export namespace bookingOffersGet {
    export interface Params {
        /**
        * The property id
        */
        propertyId: string;
        /**
        * The arrival date and the optional time
        */
        arrival: string;
        /**
        * The departure date and the optional time
        */
        departure: string;
        /**
        * Rate plan ids
        */
        ratePlanIds?: Array<string>;
        /**
        * Unit type ids
        */
        unitTypeIds?: Array<string>;
        /**
        * The time slice template used to filter the rate plans.
        */
        timeSliceTemplate?: TimeSliceTemplateEnum;
        /**
        * List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored.
        */
        expand?: string;
    }
    
    export enum TimeSliceTemplateEnumSet {
        DayUse = 'DayUse',
        OverNight = 'OverNight'
    }

    export type TimeSliceTemplateEnum = 'DayUse' | 'OverNight';

    export const TimeSliceTemplateEnumValues = Object.freeze(
        ['DayUse', 'OverNight'] as TimeSliceTemplateEnum[]);
    
}

@Injectable()
export class OfferApi {
    public readonly defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Returns offers for one specific stay.
     * Calculates and returns available offers for a specific property, arrival and departure date.
     * @param propertyId The property id
     * @param arrival The arrival date and the optional time
     * @param departure The departure date and the optional time
     * @param ratePlanIds Rate plan ids
     * @param unitTypeIds Unit type ids
     * @param timeSliceTemplate The time slice template used to filter the rate plans.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored.
     */
    public bookingOffersGet(params: bookingOffersGet.Params, $options?: ApaleoRequestOptions)
        : Observable<models.StayOffersModel | undefined> {
        return this.bookingOffersGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Returns offers for one specific stay.
     * Calculates and returns available offers for a specific property, arrival and departure date.
     * @param propertyId The property id
     * @param arrival The arrival date and the optional time
     * @param departure The departure date and the optional time
     * @param ratePlanIds Rate plan ids
     * @param unitTypeIds Unit type ids
     * @param timeSliceTemplate The time slice template used to filter the rate plans.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored.
     */
    public bookingOffersGetWithRawHttp(params: bookingOffersGet.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<models.StayOffersModel>> {
        return this.bookingOffersGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Returns offers for one specific stay.
     * Calculates and returns available offers for a specific property, arrival and departure date.
     * @param propertyId The property id
     * @param arrival The arrival date and the optional time
     * @param departure The departure date and the optional time
     * @param ratePlanIds Rate plan ids
     * @param unitTypeIds Unit type ids
     * @param timeSliceTemplate The time slice template used to filter the rate plans.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property. All other values will be silently ignored.
     */
    private bookingOffersGetWithHttpInfo(params: bookingOffersGet.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/offers';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'propertyId' is not null or undefined
        if (params.propertyId === null || params.propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling bookingOffersGet.');
        }
        // verify required parameter 'arrival' is not null or undefined
        if (params.arrival === null || params.arrival === undefined) {
            throw new Error('Required parameter arrival was null or undefined when calling bookingOffersGet.');
        }
        // verify required parameter 'departure' is not null or undefined
        if (params.departure === null || params.departure === undefined) {
            throw new Error('Required parameter departure was null or undefined when calling bookingOffersGet.');
        }
        if (params.propertyId !== undefined) {
            queryParameters.set('propertyId', <any>params.propertyId);
        }

        if (params.ratePlanIds) {
            queryParameters.set('ratePlanIds', params.ratePlanIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitTypeIds) {
            queryParameters.set('unitTypeIds', params.unitTypeIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.arrival !== undefined) {
            queryParameters.set('arrival', <any>params.arrival);
        }

        if (params.departure !== undefined) {
            queryParameters.set('departure', <any>params.departure);
        }

        if (params.timeSliceTemplate !== undefined) {
            queryParameters.set('timeSliceTemplate', <any>params.timeSliceTemplate);
        }

        if (params.expand !== undefined) {
            queryParameters.set('expand', <any>params.expand);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingOffersGetWithHttpInfo(params, $options);
            }
        )
    }

}
