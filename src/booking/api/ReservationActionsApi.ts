/**
 * Booking
 * Resources and methods to manage guest journeys.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import { Observable }                                              from 'rxjs/Rx';
import 'rxjs/add/operator/map';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { IRequestOptions, ResponseModel }                          from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';

/* tslint:disable:no-unused-variable member-ordering */


export interface bookingReservationActionsByIdAssignUnitByUnitIdPutParams {
    /**
     * Id of the reservation the unit should be assigend to.
     */
    id: string;
    /**
     * The id of the unit to be assigned.
     */
    unitId: string;
}
export interface bookingReservationActionsByIdAssignUnitPutParams {
    /**
     * Id of the reservation a unit should be assigend to.
     */
    id: string;
}
export interface bookingReservationActionsByIdCheckinPutParams {
    /**
     * Id of the reservation that should be processed.
     */
    id: string;
}
export interface bookingReservationActionsByIdCheckoutPutParams {
    /**
     * Id of the reservation that should be processed.
     */
    id: string;
}

@Injectable()
export class ReservationActionsApi {
    public defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Assign a specific unit to a reservation.
     * Assigns a specific unit to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.&lt;br /&gt;If the unit is not available, the call will return an error, and no unit will be assigned.
     * @param id Id of the reservation the unit should be assigend to.
     * @param unitId The id of the unit to be assigned.
     */
    public bookingReservationActionsByIdAssignUnitByUnitIdPut(params: bookingReservationActionsByIdAssignUnitByUnitIdPutParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.bookingReservationActionsByIdAssignUnitByUnitIdPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Assign a unit to a reservation.
     * Assigns one of the available units to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.
     * @param id Id of the reservation a unit should be assigend to.
     */
    public bookingReservationActionsByIdAssignUnitPut(params: bookingReservationActionsByIdAssignUnitPutParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.bookingReservationActionsByIdAssignUnitPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Check-in of a reservation.
     * Check-in a specific reservation which is in status &#39;Confirmed&#39;, and has a unit assigned. This changes the status to &#39;InHouse&#39;, and sets the check-in date and time.
     * @param id Id of the reservation that should be processed.
     */
    public bookingReservationActionsByIdCheckinPut(params: bookingReservationActionsByIdCheckinPutParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.bookingReservationActionsByIdCheckinPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Check-out of a reservation.
     * Check-out a specific reservation which is in status &#39;InHouse&#39;. This changes the status to &#39;CheckedOut&#39;, and sets the check-out date and time.
     * @param id Id of the reservation that should be processed.
     */
    public bookingReservationActionsByIdCheckoutPut(params: bookingReservationActionsByIdCheckoutPutParams, $options?: IRequestOptions)
        : Observable<void> {
        return this.bookingReservationActionsByIdCheckoutPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Assign a specific unit to a reservation.
     * Assigns a specific unit to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.&lt;br /&gt;If the unit is not available, the call will return an error, and no unit will be assigned.
     * @param id Id of the reservation the unit should be assigend to.
     * @param unitId The id of the unit to be assigned.
     */
    public bookingReservationActionsByIdAssignUnitByUnitIdPutWithRawHttp(params: bookingReservationActionsByIdAssignUnitByUnitIdPutParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.bookingReservationActionsByIdAssignUnitByUnitIdPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Assign a unit to a reservation.
     * Assigns one of the available units to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.
     * @param id Id of the reservation a unit should be assigend to.
     */
    public bookingReservationActionsByIdAssignUnitPutWithRawHttp(params: bookingReservationActionsByIdAssignUnitPutParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.bookingReservationActionsByIdAssignUnitPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Check-in of a reservation.
     * Check-in a specific reservation which is in status &#39;Confirmed&#39;, and has a unit assigned. This changes the status to &#39;InHouse&#39;, and sets the check-in date and time.
     * @param id Id of the reservation that should be processed.
     */
    public bookingReservationActionsByIdCheckinPutWithRawHttp(params: bookingReservationActionsByIdCheckinPutParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.bookingReservationActionsByIdCheckinPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Check-out of a reservation.
     * Check-out a specific reservation which is in status &#39;InHouse&#39;. This changes the status to &#39;CheckedOut&#39;, and sets the check-out date and time.
     * @param id Id of the reservation that should be processed.
     */
    public bookingReservationActionsByIdCheckoutPutWithRawHttp(params: bookingReservationActionsByIdCheckoutPutParams, $options?: IRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.bookingReservationActionsByIdCheckoutPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Assign a specific unit to a reservation.
     * Assigns a specific unit to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.&lt;br /&gt;If the unit is not available, the call will return an error, and no unit will be assigned.
     * @param id Id of the reservation the unit should be assigend to.
     * @param unitId The id of the unit to be assigned.
     */
    private bookingReservationActionsByIdAssignUnitByUnitIdPutWithHttpInfo(params: bookingReservationActionsByIdAssignUnitByUnitIdPutParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservation-actions/${id}/assign-unit/${unitId}'
                    .replace('${' + 'id' + '}', String(params.id))
                    .replace('${' + 'unitId' + '}', String(params.unitId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationActionsByIdAssignUnitByUnitIdPut.');
        }
        // verify required parameter 'unitId' is not null or undefined
        if (params.unitId === null || params.unitId === undefined) {
            throw new Error('Required parameter unitId was null or undefined when calling bookingReservationActionsByIdAssignUnitByUnitIdPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationActionsByIdAssignUnitByUnitIdPutWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Assign a unit to a reservation.
     * Assigns one of the available units to a reservation which is in state &#39;Confirmed&#39; or &#39;InHouse&#39;.
     * @param id Id of the reservation a unit should be assigend to.
     */
    private bookingReservationActionsByIdAssignUnitPutWithHttpInfo(params: bookingReservationActionsByIdAssignUnitPutParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservation-actions/${id}/assign-unit'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationActionsByIdAssignUnitPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationActionsByIdAssignUnitPutWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Check-in of a reservation.
     * Check-in a specific reservation which is in status &#39;Confirmed&#39;, and has a unit assigned. This changes the status to &#39;InHouse&#39;, and sets the check-in date and time.
     * @param id Id of the reservation that should be processed.
     */
    private bookingReservationActionsByIdCheckinPutWithHttpInfo(params: bookingReservationActionsByIdCheckinPutParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservation-actions/${id}/checkin'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationActionsByIdCheckinPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationActionsByIdCheckinPutWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Check-out of a reservation.
     * Check-out a specific reservation which is in status &#39;InHouse&#39;. This changes the status to &#39;CheckedOut&#39;, and sets the check-out date and time.
     * @param id Id of the reservation that should be processed.
     */
    private bookingReservationActionsByIdCheckoutPutWithHttpInfo(params: bookingReservationActionsByIdCheckoutPutParams, $options?: IRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservation-actions/${id}/checkout'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationActionsByIdCheckoutPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationActionsByIdCheckoutPutWithHttpInfo(params, $options);
            }
        )
    }

}
