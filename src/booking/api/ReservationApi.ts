/**
 * Booking
 * Resources and methods to manage guest journeys.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import { Inject, Injectable, LOCALE_ID }                           from '@angular/core';
import { Http, Headers, URLSearchParams, Response, RequestMethod } from '@angular/http';

import * as models                                                 from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                           from '../../variables';
import { ApaleoRequestOptions, ResponseModel }                     from '../../models';
import { Configuration }                                           from '../../configuration';
import { callApiEndpoint }                                         from '../../functions.api';



export namespace bookingReservationsByIdAmendPost {
    export interface Params {
        /**
        * Id of the reservation that should be modified
        */
        id: string;
        /**
        * See AmendReservationModel for details.
        */
        requestBody: models.AmendReservationModel;
    }
    
}
export namespace bookingReservationsByIdGet {
    export interface Params {
        /**
        * Id of the reservation to be retrieved.
        */
        id: string;
        /**
        * List of all embedded resources that should be expanded in the response. Possible values are: property, unit, unitType, ratePlan, timeSlices. All other values will be silently ignored.
        */
        expand?: string;
    }
    
}
export namespace bookingReservationsByIdPut {
    export interface Params {
        /**
        * Id of the reservation that should be replaced.
        */
        id: string;
        /**
        * See ReplaceReservationModel for details.
        */
        requestBody: models.ReplaceReservationModel;
    }
    
}
export namespace bookingReservationsGet {
    export interface Params {
        /**
        * Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
        */
        pageNumber: number;
        /**
        * Page size
        */
        pageSize: number;
        /**
        * Filter result by booking id
        */
        bookingId?: string;
        /**
        * Filter result by requested properties
        */
        propertyIds?: Array<string>;
        /**
        * Filter result by requested rate plans
        */
        ratePlanIds?: Array<string>;
        /**
        * Filter result by assigned units
        */
        unitIds?: Array<string>;
        /**
        * Filter result by requested unit types
        */
        unitTypeIds?: Array<string>;
        /**
        * Filter result by reservation status
        */
        status?: Array<StatusEnum>;
        /**
        * Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes
        */
        dateFilter?: DateFilterEnum;
        /**
        * The start of the time interval
        */
        from?: Date;
        /**
        * The end of the time interval
        */
        to?: Date;
    }
    
    export enum StatusEnumSet {
        Confirmed = 'Confirmed',
        InHouse = 'InHouse',
        CheckedOut = 'CheckedOut'
    }

    export type StatusEnum = 'Confirmed' | 'InHouse' | 'CheckedOut';

    export const StatusEnumValues = Object.freeze(
        ['Confirmed', 'InHouse', 'CheckedOut'] as StatusEnum[]);
    
    export enum DateFilterEnumSet {
        Arrival = 'Arrival',
        Departure = 'Departure',
        Stay = 'Stay',
        Creation = 'Creation',
        Modification = 'Modification'
    }

    export type DateFilterEnum = 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification';

    export const DateFilterEnumValues = Object.freeze(
        ['Arrival', 'Departure', 'Stay', 'Creation', 'Modification'] as DateFilterEnum[]);
    
}
export namespace bookingReservationscountGet {
    export interface Params {
        /**
        * Filter result by booking id
        */
        bookingId?: string;
        /**
        * Filter result by requested properties
        */
        propertyIds?: Array<string>;
        /**
        * Filter result by requested rate plans
        */
        ratePlanIds?: Array<string>;
        /**
        * Filter result by assigned units
        */
        unitIds?: Array<string>;
        /**
        * Filter result by requested unit types
        */
        unitTypeIds?: Array<string>;
        /**
        * Filter result by reservation status
        */
        status?: Array<StatusEnum>;
        /**
        * Filter by date and time attributes of reservation. Use in combination with the 'To' and 'From' attributes
        */
        dateFilter?: DateFilterEnum;
        /**
        * The start of the time interval
        */
        from?: Date;
        /**
        * The end of the time interval
        */
        to?: Date;
    }
    
    export enum StatusEnumSet {
        Confirmed = 'Confirmed',
        InHouse = 'InHouse',
        CheckedOut = 'CheckedOut'
    }

    export type StatusEnum = 'Confirmed' | 'InHouse' | 'CheckedOut';

    export const StatusEnumValues = Object.freeze(
        ['Confirmed', 'InHouse', 'CheckedOut'] as StatusEnum[]);
    
    export enum DateFilterEnumSet {
        Arrival = 'Arrival',
        Departure = 'Departure',
        Stay = 'Stay',
        Creation = 'Creation',
        Modification = 'Modification'
    }

    export type DateFilterEnum = 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification';

    export const DateFilterEnumValues = Object.freeze(
        ['Arrival', 'Departure', 'Stay', 'Creation', 'Modification'] as DateFilterEnum[]);
    
}

@Injectable()
export class ReservationApi {
    public readonly defaultHeaders: Headers = new Headers();

    constructor(
        protected readonly http: Http, 
        protected readonly configuration: Configuration,
        @Inject(LOCALE_ID) protected readonly locale: string, 
        @Inject(BASE_PATH) protected readonly basePath: string) {

        this.defaultHeaders.append('Accept-Language', locale);
    }

    /**
     * Applies changes to an existing reservation.
     * Modifies the stay-related data of a reservation.&lt;br /&gt;  Validation rules for the data:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The &#39;arrival&#39; must be set, and it must be in the future&lt;/li&gt;&lt;li&gt;&#39;departure&#39; must be set, and it must be later than the arrival&lt;/li&gt;&lt;li&gt;&#39;adults&#39; must be set and greater than 0&lt;/li&gt;&lt;li&gt;The &#39;rateplan id&#39; must be set (or 500), in the correct format xxx-xxx (or 422), and (implicitly) it has to exist (or 422, &#39;no availability&#39;)&lt;/li&gt;&lt;li&gt;&#39;unit type&#39; works like the rateplan.&lt;/li&gt;&lt;li&gt;&#39;children&#39; are optional to be set. If not specified, they will be set to 0.&lt;/li&gt;&lt;/ul&gt;  Changes to reservations that are in the status &#39;InHouse&#39; or &#39;CheckedOut&#39; are not possible.
     * @param id Id of the reservation that should be modified
     * @param requestBody See AmendReservationModel for details.
     */
    public bookingReservationsByIdAmendPost(params: bookingReservationsByIdAmendPost.Params, $options?: ApaleoRequestOptions)
        : Observable<models.ReservationAmendedModel | undefined> {
        return this.bookingReservationsByIdAmendPostWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Returns a specific reservation.
     * Retrieves a reservation, specified by its ID.
     * @param id Id of the reservation to be retrieved.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property, unit, unitType, ratePlan, timeSlices. All other values will be silently ignored.
     */
    public bookingReservationsByIdGet(params: bookingReservationsByIdGet.Params, $options?: ApaleoRequestOptions)
        : Observable<models.ReservationModel | undefined> {
        return this.bookingReservationsByIdGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Replaces an existing reservation.
     * Completely replaces a reservation with the new object passed in. The old data will be lost.
     * @param id Id of the reservation that should be replaced.
     * @param requestBody See ReplaceReservationModel for details.
     */
    public bookingReservationsByIdPut(params: bookingReservationsByIdPut.Params, $options?: ApaleoRequestOptions)
        : Observable<void> {
        return this.bookingReservationsByIdPutWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Returns a list of all reservations, filtered by the specified parameters.
     * Returns a list of all reservations, filtered by the specified parameters. If no parameters are set, returns the entire list.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param bookingId Filter result by booking id
     * @param propertyIds Filter result by requested properties
     * @param ratePlanIds Filter result by requested rate plans
     * @param unitIds Filter result by assigned units
     * @param unitTypeIds Filter result by requested unit types
     * @param status Filter result by reservation status
     * @param dateFilter Filter by date and time attributes of reservation. Use in combination with the &#39;To&#39; and &#39;From&#39; attributes
     * @param from The start of the time interval
     * @param to The end of the time interval
     */
    public bookingReservationsGet(params: bookingReservationsGet.Params, $options?: ApaleoRequestOptions)
        : Observable<models.ReservationListModel | undefined> {
        return this.bookingReservationsGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }

    /**
     * Returns the number of reservations fulfilling the criteria specified in the parameters.
     * If no parameters are set, returns the total count of reservations.
     * @param bookingId Filter result by booking id
     * @param propertyIds Filter result by requested properties
     * @param ratePlanIds Filter result by requested rate plans
     * @param unitIds Filter result by assigned units
     * @param unitTypeIds Filter result by requested unit types
     * @param status Filter result by reservation status
     * @param dateFilter Filter by date and time attributes of reservation. Use in combination with the &#39;To&#39; and &#39;From&#39; attributes
     * @param from The start of the time interval
     * @param to The end of the time interval
     */
    public bookingReservationscountGet(params: bookingReservationscountGet.Params, $options?: ApaleoRequestOptions)
        : Observable<models.CountModel | undefined> {
        return this.bookingReservationscountGetWithRawHttp(params, $options)
            .map(response => response.$hasValue(response) ? response : undefined);
    }


    /**
     * Applies changes to an existing reservation.
     * Modifies the stay-related data of a reservation.&lt;br /&gt;  Validation rules for the data:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The &#39;arrival&#39; must be set, and it must be in the future&lt;/li&gt;&lt;li&gt;&#39;departure&#39; must be set, and it must be later than the arrival&lt;/li&gt;&lt;li&gt;&#39;adults&#39; must be set and greater than 0&lt;/li&gt;&lt;li&gt;The &#39;rateplan id&#39; must be set (or 500), in the correct format xxx-xxx (or 422), and (implicitly) it has to exist (or 422, &#39;no availability&#39;)&lt;/li&gt;&lt;li&gt;&#39;unit type&#39; works like the rateplan.&lt;/li&gt;&lt;li&gt;&#39;children&#39; are optional to be set. If not specified, they will be set to 0.&lt;/li&gt;&lt;/ul&gt;  Changes to reservations that are in the status &#39;InHouse&#39; or &#39;CheckedOut&#39; are not possible.
     * @param id Id of the reservation that should be modified
     * @param requestBody See AmendReservationModel for details.
     */
    public bookingReservationsByIdAmendPostWithRawHttp(params: bookingReservationsByIdAmendPost.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<models.ReservationAmendedModel>> {
        return this.bookingReservationsByIdAmendPostWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Returns a specific reservation.
     * Retrieves a reservation, specified by its ID.
     * @param id Id of the reservation to be retrieved.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property, unit, unitType, ratePlan, timeSlices. All other values will be silently ignored.
     */
    public bookingReservationsByIdGetWithRawHttp(params: bookingReservationsByIdGet.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<models.ReservationModel>> {
        return this.bookingReservationsByIdGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Replaces an existing reservation.
     * Completely replaces a reservation with the new object passed in. The old data will be lost.
     * @param id Id of the reservation that should be replaced.
     * @param requestBody See ReplaceReservationModel for details.
     */
    public bookingReservationsByIdPutWithRawHttp(params: bookingReservationsByIdPut.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<void>> {
        return this.bookingReservationsByIdPutWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Returns a list of all reservations, filtered by the specified parameters.
     * Returns a list of all reservations, filtered by the specified parameters. If no parameters are set, returns the entire list.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param bookingId Filter result by booking id
     * @param propertyIds Filter result by requested properties
     * @param ratePlanIds Filter result by requested rate plans
     * @param unitIds Filter result by assigned units
     * @param unitTypeIds Filter result by requested unit types
     * @param status Filter result by reservation status
     * @param dateFilter Filter by date and time attributes of reservation. Use in combination with the &#39;To&#39; and &#39;From&#39; attributes
     * @param from The start of the time interval
     * @param to The end of the time interval
     */
    public bookingReservationsGetWithRawHttp(params: bookingReservationsGet.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<models.ReservationListModel>> {
        return this.bookingReservationsGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }

    /**
     * Returns the number of reservations fulfilling the criteria specified in the parameters.
     * If no parameters are set, returns the total count of reservations.
     * @param bookingId Filter result by booking id
     * @param propertyIds Filter result by requested properties
     * @param ratePlanIds Filter result by requested rate plans
     * @param unitIds Filter result by assigned units
     * @param unitTypeIds Filter result by requested unit types
     * @param status Filter result by reservation status
     * @param dateFilter Filter by date and time attributes of reservation. Use in combination with the &#39;To&#39; and &#39;From&#39; attributes
     * @param from The start of the time interval
     * @param to The end of the time interval
     */
    public bookingReservationscountGetWithRawHttp(params: bookingReservationscountGet.Params, $options?: ApaleoRequestOptions)
        : Observable<ResponseModel<models.CountModel>> {
        return this.bookingReservationscountGetWithHttpInfo(params, $options)
            .map((response: Response) => new ResponseModel(response));
    }


    /**
     * Applies changes to an existing reservation.
     * Modifies the stay-related data of a reservation.&lt;br /&gt;  Validation rules for the data:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The &#39;arrival&#39; must be set, and it must be in the future&lt;/li&gt;&lt;li&gt;&#39;departure&#39; must be set, and it must be later than the arrival&lt;/li&gt;&lt;li&gt;&#39;adults&#39; must be set and greater than 0&lt;/li&gt;&lt;li&gt;The &#39;rateplan id&#39; must be set (or 500), in the correct format xxx-xxx (or 422), and (implicitly) it has to exist (or 422, &#39;no availability&#39;)&lt;/li&gt;&lt;li&gt;&#39;unit type&#39; works like the rateplan.&lt;/li&gt;&lt;li&gt;&#39;children&#39; are optional to be set. If not specified, they will be set to 0.&lt;/li&gt;&lt;/ul&gt;  Changes to reservations that are in the status &#39;InHouse&#39; or &#39;CheckedOut&#39; are not possible.
     * @param id Id of the reservation that should be modified
     * @param requestBody See AmendReservationModel for details.
     */
    private bookingReservationsByIdAmendPostWithHttpInfo(params: bookingReservationsByIdAmendPost.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservations/${id}/amend'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdAmendPost.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling bookingReservationsByIdAmendPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Post,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationsByIdAmendPostWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Returns a specific reservation.
     * Retrieves a reservation, specified by its ID.
     * @param id Id of the reservation to be retrieved.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property, unit, unitType, ratePlan, timeSlices. All other values will be silently ignored.
     */
    private bookingReservationsByIdGetWithHttpInfo(params: bookingReservationsByIdGet.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservations/${id}'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdGet.');
        }
        if (params.expand !== undefined) {
            queryParameters.set('expand', <any>params.expand);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationsByIdGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Replaces an existing reservation.
     * Completely replaces a reservation with the new object passed in. The old data will be lost.
     * @param id Id of the reservation that should be replaced.
     * @param requestBody See ReplaceReservationModel for details.
     */
    private bookingReservationsByIdPutWithHttpInfo(params: bookingReservationsByIdPut.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservations/${id}'
                    .replace('${' + 'id' + '}', String(params.id));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'id' is not null or undefined
        if (params.id === null || params.id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdPut.');
        }
        // verify required parameter 'requestBody' is not null or undefined
        if (params.requestBody === null || params.requestBody === undefined) {
            throw new Error('Required parameter requestBody was null or undefined when calling bookingReservationsByIdPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json', 
            'text/json', 
            'application/json-patch+json'
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        headers.set('Content-Type', 'application/json');

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Put,
                headers: headers,
                body: params.requestBody == null ? '' : JSON.stringify(params.requestBody), // https://github.com/angular/angular/issues/10612
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationsByIdPutWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Returns a list of all reservations, filtered by the specified parameters.
     * Returns a list of all reservations, filtered by the specified parameters. If no parameters are set, returns the entire list.
     * @param pageNumber Page number, starting from 1. Results in 204 if there are no items on that page. If the value is lower than 1, will be set to 1
     * @param pageSize Page size
     * @param bookingId Filter result by booking id
     * @param propertyIds Filter result by requested properties
     * @param ratePlanIds Filter result by requested rate plans
     * @param unitIds Filter result by assigned units
     * @param unitTypeIds Filter result by requested unit types
     * @param status Filter result by reservation status
     * @param dateFilter Filter by date and time attributes of reservation. Use in combination with the &#39;To&#39; and &#39;From&#39; attributes
     * @param from The start of the time interval
     * @param to The end of the time interval
     */
    private bookingReservationsGetWithHttpInfo(params: bookingReservationsGet.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservations';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'pageNumber' is not null or undefined
        if (params.pageNumber === null || params.pageNumber === undefined) {
            throw new Error('Required parameter pageNumber was null or undefined when calling bookingReservationsGet.');
        }
        // verify required parameter 'pageSize' is not null or undefined
        if (params.pageSize === null || params.pageSize === undefined) {
            throw new Error('Required parameter pageSize was null or undefined when calling bookingReservationsGet.');
        }
        if (params.bookingId !== undefined) {
            queryParameters.set('bookingId', <any>params.bookingId);
        }

        if (params.propertyIds) {
            queryParameters.set('propertyIds', params.propertyIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.ratePlanIds) {
            queryParameters.set('ratePlanIds', params.ratePlanIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitIds) {
            queryParameters.set('unitIds', params.unitIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitTypeIds) {
            queryParameters.set('unitTypeIds', params.unitTypeIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.status) {
            queryParameters.set('status', params.status.join(COLLECTION_FORMATS['csv']));
        }

        if (params.dateFilter !== undefined) {
            queryParameters.set('dateFilter', <any>params.dateFilter);
        }

        if (params.from !== undefined) {
            queryParameters.set('from', <any>params.from.toApaleoIso());
        }

        if (params.to !== undefined) {
            queryParameters.set('to', <any>params.to.toApaleoIso());
        }

        if (params.pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>params.pageNumber);
        }

        if (params.pageSize !== undefined) {
            queryParameters.set('pageSize', <any>params.pageSize);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationsGetWithHttpInfo(params, $options);
            }
        )
    }

    /**
     * Returns the number of reservations fulfilling the criteria specified in the parameters.
     * If no parameters are set, returns the total count of reservations.
     * @param bookingId Filter result by booking id
     * @param propertyIds Filter result by requested properties
     * @param ratePlanIds Filter result by requested rate plans
     * @param unitIds Filter result by assigned units
     * @param unitTypeIds Filter result by requested unit types
     * @param status Filter result by reservation status
     * @param dateFilter Filter by date and time attributes of reservation. Use in combination with the &#39;To&#39; and &#39;From&#39; attributes
     * @param from The start of the time interval
     * @param to The end of the time interval
     */
    private bookingReservationscountGetWithHttpInfo(params: bookingReservationscountGet.Params, $options?: ApaleoRequestOptions): Observable<Response> {
        params = params || {};
        const path = this.basePath + '/booking/reservations/$count';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (params.bookingId !== undefined) {
            queryParameters.set('bookingId', <any>params.bookingId);
        }

        if (params.propertyIds) {
            queryParameters.set('propertyIds', params.propertyIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.ratePlanIds) {
            queryParameters.set('ratePlanIds', params.ratePlanIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitIds) {
            queryParameters.set('unitIds', params.unitIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.unitTypeIds) {
            queryParameters.set('unitTypeIds', params.unitTypeIds.join(COLLECTION_FORMATS['csv']));
        }

        if (params.status) {
            queryParameters.set('status', params.status.join(COLLECTION_FORMATS['csv']));
        }

        if (params.dateFilter !== undefined) {
            queryParameters.set('dateFilter', <any>params.dateFilter);
        }

        if (params.from !== undefined) {
            queryParameters.set('from', <any>params.from.toApaleoIso());
        }

        if (params.to !== undefined) {
            queryParameters.set('to', <any>params.to.toApaleoIso());
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/plain', 
            'application/json', 
            'text/json'
        ];

        // authentication (oauth2) required
        // oauth required
        if (this.configuration.accessToken) {
            let accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers.set('Authorization', 'Bearer ' + accessToken);
        }

        return callApiEndpoint(
            this.http, 
            path,
            headers,
            {
                method: RequestMethod.Get,
                headers: headers,
                search: queryParameters,
                withCredentials: this.configuration.withCredentials
            },
            Object.assign({}, this.configuration, $options),
            retryTimesToGo => {
                $options = $options || {};
                $options.retryTimes = retryTimesToGo;

                return this.bookingReservationscountGetWithHttpInfo(params, $options);
            }
        )
    }

}
