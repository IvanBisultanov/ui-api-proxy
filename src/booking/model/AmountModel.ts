/**
 * Booking
 * Resources and methods to manage guest journeys.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface AmountModel {
    grossAmount?: number;

    netAmount?: number;

    vatType: AmountModel.VatTypeEnum;

    currency: string;

}
export namespace AmountModel {
    export enum VatTypeEnumSet {
        Free = 'Free',
        Reduced = 'Reduced',
        Normal = 'Normal',
        Mixed = 'Mixed'
    }

    export type VatTypeEnum = 'Free' | 'Reduced' | 'Normal' | 'Mixed';

    export const VatTypeEnumValues = Object.freeze(
        ['Free', 'Reduced', 'Normal', 'Mixed'] as VatTypeEnum[]);
}

export type AmountModelWithRawHttp = AmountModel & ResponseModel<AmountModel>;

export namespace AmountModel {
    export const $metaData = { 
        grossAmount: Object.freeze({ 
            type: 'number',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        netAmount: Object.freeze({ 
            type: 'number',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        vatType: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isEnum: true,
            allowedEnumValues: VatTypeEnumValues,
            isPrimitiveType: true,
        } as ApaleoEnumPropertyMetaData<VatTypeEnum>),
        currency: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<AmountModel>): FormGroup {
        const defaultControls = { 
            grossAmount: getControl($metaData.grossAmount, options, 'grossAmount'),
            netAmount: getControl($metaData.netAmount, options, 'netAmount'),
            vatType: getControl($metaData.vatType, options, 'vatType'),
            currency: getControl($metaData.currency, options, 'currency'),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

