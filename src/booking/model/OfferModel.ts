/**
 * Booking
 * Resources and methods to manage guest journeys.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface OfferModel {
    /**
     * The earliest arrival date and time for this offer
     */
    arrival: Date;

    /**
     * The latest departure date and time for this offer
     */
    departure: Date;

    /**
     * The unit type for which the following offers apply
     */
    unitType: models.EmbeddedUnitTypeModel;

    /**
     * The number of available units for that offer
     */
    availableUnits: number;

    /**
     * The rate plan for this offer
     */
    ratePlan: models.EmbeddedRatePlanModel;

    /**
     * The price for the whole stay
     */
    totalAmount: models.AmountModel;

    /**
     * The breakdown for each time slice for this offer
     */
    timeSlices: Array<models.OfferTimeSliceModel>;

}

export type OfferModelWithRawHttp = OfferModel & ResponseModel<OfferModel>;

export namespace OfferModel {
    export const $metaData = { 
        arrival: Object.freeze({ 
            isRequired: true,
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        departure: Object.freeze({ 
            isRequired: true,
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        unitType: Object.freeze({ 
            isRequired: true,
            type: 'models.EmbeddedUnitTypeModel',
        } as ApaleoPropertyMetaData),
        availableUnits: Object.freeze({ 
            isRequired: true,
            type: 'number',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        ratePlan: Object.freeze({ 
            isRequired: true,
            type: 'models.EmbeddedRatePlanModel',
        } as ApaleoPropertyMetaData),
        totalAmount: Object.freeze({ 
            isRequired: true,
            type: 'models.AmountModel',
        } as ApaleoPropertyMetaData),
        timeSlices: Object.freeze({ 
            isRequired: true,
            type: 'Array<models.OfferTimeSliceModel>',
            isListContainer: true,
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<OfferModel>): FormGroup {
        const defaultControls = { 
            arrival: getControl($metaData.arrival, options, 'arrival'),
            departure: getControl($metaData.departure, options, 'departure'),
            unitType: models.EmbeddedUnitTypeModel.$buildForm(fb),
            availableUnits: getControl($metaData.availableUnits, options, 'availableUnits'),
            ratePlan: models.EmbeddedRatePlanModel.$buildForm(fb),
            totalAmount: models.AmountModel.$buildForm(fb),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

