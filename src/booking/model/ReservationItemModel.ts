/**
 * Booking
 * Resources and methods to manage guest journeys.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from './models';

import { FormBuilder, FormGroup }                                               from '@angular/forms';
import { ResponseModel }                                                        from '../../models';
import { getControl, adjustDefaultControls, prepareFormGroup }                  from '../../functions.model';
import { BuildFormOptions, ApaleoPropertyMetaData, ApaleoEnumPropertyMetaData } from '../../types';

export interface ReservationItemModel {
    /**
     * Reservation id
     */
    id: string;

    /**
     * Booking id
     */
    bookingId: string;

    /**
     * Status of the reservation
     */
    status: ReservationItemModel.StatusEnum;

    /**
     * Time of check-in
     */
    checkInTime?: Date;

    /**
     * Time of check-out
     */
    checkOutTime?: Date;

    /**
     * ID of the property
     */
    propertyId: string;

    /**
     * ID of the rateplan
     */
    ratePlanId: string;

    /**
     * ID of the unit type
     */
    unitTypeId: string;

    /**
     * ID of the unit
     */
    unitId?: string;

    /**
     * Total amount
     */
    totalAmount: models.AmountModel;

    /**
     * Date of arrival
     */
    arrival: Date;

    /**
     * ID of the departure
     */
    departure: Date;

    /**
     * Date of creation
     */
    created: Date;

    /**
     * Date of last modification
     */
    modified: Date;

    /**
     * Number of adults
     */
    adults: number;

    /**
     * Number of children
     */
    children: number;

    /**
     * Code of the guest title
     */
    guestTitle: string;

    /**
     * First name of the guest
     */
    firstName: string;

    /**
     * ID of the rateplan
     */
    middleInitial?: string;

    /**
     * Last name of the guest
     */
    lastName: string;

    /**
     * Email address of the guest
     */
    email: string;

    /**
     * Phone number of the guest
     */
    phone?: string;

    /**
     * Address of the guest
     */
    address?: models.AddressModel;

    /**
     * Collection of links to related resources
     */
    links?: { [key: string]: models.Link; };

}
export namespace ReservationItemModel {
    export enum StatusEnumSet {
        Confirmed = 'Confirmed',
        InHouse = 'InHouse',
        CheckedOut = 'CheckedOut'
    }

    export type StatusEnum = 'Confirmed' | 'InHouse' | 'CheckedOut';

    export const StatusEnumValues = Object.freeze(
        ['Confirmed', 'InHouse', 'CheckedOut'] as StatusEnum[]);
}

export type ReservationItemModelWithRawHttp = ReservationItemModel & ResponseModel<ReservationItemModel>;

export namespace ReservationItemModel {
    export const $metaData = { 
        id: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        bookingId: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        status: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isEnum: true,
            allowedEnumValues: StatusEnumValues,
            isPrimitiveType: true,
        } as ApaleoEnumPropertyMetaData<StatusEnum>),
        checkInTime: Object.freeze({ 
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        checkOutTime: Object.freeze({ 
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        propertyId: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        ratePlanId: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        unitTypeId: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        unitId: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        totalAmount: Object.freeze({ 
            isRequired: true,
            type: 'models.AmountModel',
        } as ApaleoPropertyMetaData),
        arrival: Object.freeze({ 
            isRequired: true,
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        departure: Object.freeze({ 
            isRequired: true,
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        created: Object.freeze({ 
            isRequired: true,
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        modified: Object.freeze({ 
            isRequired: true,
            type: 'Date',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        adults: Object.freeze({ 
            isRequired: true,
            type: 'number',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        children: Object.freeze({ 
            isRequired: true,
            type: 'number',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        guestTitle: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        firstName: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        middleInitial: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        lastName: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        email: Object.freeze({ 
            isRequired: true,
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        phone: Object.freeze({ 
            type: 'string',
            isPrimitiveType: true,
        } as ApaleoPropertyMetaData),
        address: Object.freeze({ 
            type: 'models.AddressModel',
        } as ApaleoPropertyMetaData),
        links: Object.freeze({ 
            type: '{ [key: string]: models.Link; }',
            isMapContainer: true,
        } as ApaleoPropertyMetaData),
    };

    export function $buildForm(fb: FormBuilder, options?: BuildFormOptions<ReservationItemModel>): FormGroup {
        const defaultControls = { 
            id: getControl($metaData.id, options, 'id'),
            bookingId: getControl($metaData.bookingId, options, 'bookingId'),
            status: getControl($metaData.status, options, 'status'),
            checkInTime: getControl($metaData.checkInTime, options, 'checkInTime'),
            checkOutTime: getControl($metaData.checkOutTime, options, 'checkOutTime'),
            propertyId: getControl($metaData.propertyId, options, 'propertyId'),
            ratePlanId: getControl($metaData.ratePlanId, options, 'ratePlanId'),
            unitTypeId: getControl($metaData.unitTypeId, options, 'unitTypeId'),
            unitId: getControl($metaData.unitId, options, 'unitId'),
            totalAmount: models.AmountModel.$buildForm(fb),
            arrival: getControl($metaData.arrival, options, 'arrival'),
            departure: getControl($metaData.departure, options, 'departure'),
            created: getControl($metaData.created, options, 'created'),
            modified: getControl($metaData.modified, options, 'modified'),
            adults: getControl($metaData.adults, options, 'adults'),
            children: getControl($metaData.children, options, 'children'),
            guestTitle: getControl($metaData.guestTitle, options, 'guestTitle'),
            firstName: getControl($metaData.firstName, options, 'firstName'),
            middleInitial: getControl($metaData.middleInitial, options, 'middleInitial'),
            lastName: getControl($metaData.lastName, options, 'lastName'),
            email: getControl($metaData.email, options, 'email'),
            phone: getControl($metaData.phone, options, 'phone'),
            address: models.AddressModel.$buildForm(fb),
        };
        const group = fb.group(adjustDefaultControls(defaultControls, options));
        prepareFormGroup(group, $metaData, options);

        return group;
    }
}

